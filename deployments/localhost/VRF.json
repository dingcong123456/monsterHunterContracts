{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "ReqRandomNumber",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "number",
          "type": "uint32"
        }
      ],
      "name": "RspRandomNumber",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXECUTOR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "callbackRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "link",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "randomResults",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "reqRandomNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestToMaxNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestToTaskId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "name": "setKeyHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "num",
          "type": "uint16"
        }
      ],
      "name": "setReqConfirmations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "taskToRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "viewRandomResult",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfCoordinator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6fd1c6fe0ec46e69b0d21cb442446d3659f4b99913aa27bfe0708a0a46ba13a8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "883167",
    "logsBloom": "0x
    "blockHash": "0x9863e319f3eaf91a52240e5ae3b878a82712b420e4ae29f9e64c62024e92af9d",
    "transactionHash": "0x6fd1c6fe0ec46e69b0d21cb442446d3659f4b99913aa27bfe0708a0a46ba13a8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x6fd1c6fe0ec46e69b0d21cb442446d3659f4b99913aa27bfe0708a0a46ba13a8",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9863e319f3eaf91a52240e5ae3b878a82712b420e4ae29f9e64c62024e92af9d"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "883167",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1914,
    "0x6A2AAd07396B36Fe02a22b33cf443582f682c82f",
    "0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06",
    "0xd4bb89654db74673a187bd804519e65e3f71a52bc55f11da7601a13dcf505314",
    "0x893BAB56Cb5f4E319f402A5d0100566A363C9300"
  ],
  "numDeployments": 1,
  "solcInputHash": "8f5cdadc06674ad86189e872bbe06f3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"ReqRandomNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"}],\"name\":\"RspRandomNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"callbackRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"link\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomResults\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"reqRandomNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestToMaxNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestToTaskId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"setKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"num\",\"type\":\"uint16\"}],\"name\":\"setReqConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"taskToRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"viewRandomResult\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reqRandomNumber(uint256,uint256)\":{\"params\":{\"max\":\": max provided by the LucksExecutor (lastTicketId)\"}},\"setExecutor(address)\":{\"params\":{\"_executor\":\": address of the PancakeSwap crowdluck\"}},\"setKeyHash(bytes32)\":{\"params\":{\"_keyHash\":\": new keyHash\"}},\"setReqConfirmations(uint16)\":{\"params\":{\"num\":\": num\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Openluck VRF\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"callbackRandomWords(uint256,uint256)\":{\"notice\":\"Callback for enmergency case\"},\"reqRandomNumber(uint256,uint256)\":{\"notice\":\"Request randomness from a user-provided max\"},\"setExecutor(address)\":{\"notice\":\"Set the address for the Lucks\"},\"setKeyHash(bytes32)\":{\"notice\":\"Change the keyHash\"},\"setReqConfirmations(uint16)\":{\"notice\":\"Change the requestConfirmations\"},\"viewRandomResult(uint256)\":{\"notice\":\"View random result\"}},\"notice\":\"It is the contract for Randomness Number Generation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/other/VRF.sol\":\"VRF\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVRF {\\n\\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number);    \\n\\n    /**\\n     * Requests randomness from a user-provided max\\n     */\\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\\n\\n    /**\\n     * Views random result\\n     */\\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\\n}\",\"keccak256\":\"0x0bb8872c24c9e671bfc8a764af0a3ef48eb46b945c8eddbdfe0a09ef9b783ec8\",\"license\":\"MIT\"},\"contracts/other/VRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// OpenZeppelin contracts\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Chainlink contracts\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\n// Openluck interfaces\\nimport {IVRF} from \\\"../interfaces/IVRF.sol\\\";\\n\\n\\n/** @title Openluck VRF\\n * @notice It is the contract for Randomness Number Generation\\n */\\ncontract VRF is VRFConsumerBaseV2, IVRF, Ownable {\\n    VRFCoordinatorV2Interface COORDINATOR;\\n    LinkTokenInterface LINKTOKEN;\\n\\n    // Your subscription ID.\\n    uint64 s_subscriptionId;\\n\\n    // Rinkeby coordinator. For other networks,\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n    address public vrfCoordinator;\\n\\n    // Rinkeby LINK token contract. For other networks,\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n    address public link;\\n\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\n    // For a list of available gas lanes on each network,\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n    bytes32 public keyHash;\\n\\n    // Depends on the number of requested values that you want sent to the\\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\n    // so 100,000 is a safe default for this example contract. Test and adjust\\n    // this limit based on the network that you select, the size of the request,\\n    // and the processing of the callback request in the fulfillRandomWords()\\n    // function.\\n    uint32 public callbackGasLimit = 100000;\\n\\n    // The default is 3, but you can set this higher.\\n    uint16 requestConfirmations = 3;\\n\\n    address public EXECUTOR;\\n\\n    mapping(uint256 => uint32) public randomResults;      // taskId => ticket FinalNumber\\n    mapping(uint256 => uint256) public requestToTaskId;    // requestId => taskId\\n    mapping(uint256 => uint256) public requestToMaxNum;    // requestId => max num\\n    mapping(uint256 => uint256) public taskToRequestId;    // taskId => requestId\\n\\n    constructor(\\n        uint64 _subscriptionId,\\n        address _vrfCoordinator,\\n        address _link,\\n        bytes32 _keyHash,\\n        address _executor\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\n\\n        require(_subscriptionId > 0, \\\"Invalid subscriptionId\\\");\\n\\n        s_subscriptionId = _subscriptionId;\\n        vrfCoordinator = _vrfCoordinator;\\n        link = _link;\\n        keyHash = _keyHash;\\n\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n        LINKTOKEN = LinkTokenInterface(link);\\n        EXECUTOR = _executor;\\n    }\\n\\n    /**\\n     * @notice Request randomness from a user-provided max\\n     * @param max: max provided by the LucksExecutor (lastTicketId)\\n     */\\n    function reqRandomNumber(uint256 taskId, uint256 max) external override {\\n        require(msg.sender == EXECUTOR, \\\"Only Lucks can reqRandomNumber\\\");\\n        require(max > 0, \\\"Invalid max input\\\");\\n        \\n        if (taskToRequestId[taskId] > 0) {\\n            return;\\n        }\\n        \\n        // Will revert if subscription is not set and funded.\\n        uint256 requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            1\\n        );\\n        requestToTaskId[requestId] = taskId;\\n        requestToMaxNum[requestId] = max;\\n        taskToRequestId[taskId] = requestId;\\n\\n        emit ReqRandomNumber(taskId, max, requestId);\\n    }\\n\\n    /**\\n     * @notice View random result\\n     */\\n    function viewRandomResult(uint256 taskId)\\n        external\\n        view\\n        override\\n        returns (uint32)\\n    {\\n        return randomResults[taskId];\\n    }\\n\\n    /**\\n     * @notice Callback function used by ChainLink's VRF Coordinator\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        uint256 taskId = requestToTaskId[requestId];        \\n        require(taskId > 0, \\\"Wrong taskId or requestId\\\");\\n\\n        // Between 1 and max:\\n        randomResults[taskId] = uint32((randomWords[0] % requestToMaxNum[requestId]) + 1);\\n\\n        emit RspRandomNumber(\\n            taskId,\\n            requestId,\\n            randomWords[0],\\n            randomResults[taskId]\\n        );\\n    }\\n\\n    // ============ only Owner ============\\n\\n    /**\\n     * @notice Callback for enmergency case\\n     */\\n    function callbackRandomWords(uint256 taskId, uint256 seed)\\n        external\\n        onlyOwner\\n    {    \\n        uint256 requestId = taskToRequestId[taskId];\\n\\n        // generate random by owner\\n        uint256 random = uint256(\\n           keccak256(abi.encodePacked(\\n                seed *\\n                block.timestamp *\\n                block.difficulty *\\n                block.number *\\n                uint(blockhash(block.number - requestConfirmations))\\n            ))\\n        );\\n        \\n        // Between 1 and max:\\n        randomResults[taskId] = uint32((random % requestToMaxNum[requestId]) + 1);\\n\\n        emit RspRandomNumber(\\n            taskId,\\n            requestToTaskId[taskId],\\n            random,\\n            randomResults[taskId]\\n        );\\n    }\\n\\n    /**\\n     * @notice Change the keyHash\\n     * @param _keyHash: new keyHash\\n     */\\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\\n        keyHash = _keyHash;\\n    }\\n\\n    /**\\n     * @notice Change the requestConfirmations\\n     * @param num: num\\n     */\\n    function setReqConfirmations(uint16 num) external onlyOwner {\\n        requestConfirmations = num;\\n    }\\n\\n    /**\\n     * @notice Set the address for the Lucks\\n     * @param _executor: address of the PancakeSwap crowdluck\\n     */\\n    function setExecutor(address _executor) external onlyOwner {\\n        EXECUTOR = _executor;\\n    }\\n}\\n\",\"keccak256\":\"0x28007708b0819a88ad42096f168e437d8ecadaf89c60dd504f0d5da00ff5b798\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526006805465ffffffffffff19166403000186a017905534801561002657600080fd5b50604051610e50380380610e50833981016040819052610045916101c1565b606084901b6001600160601b03191660805261006033610155565b6000856001600160401b0316116100bd5760405162461bcd60e51b815260206004820152601660248201527f496e76616c696420737562736372697074696f6e496400000000000000000000604482015260640160405180910390fd5b60028054600380546001600160a01b039788166001600160a01b03199182168117909255600480549789169782168817905560059590955560018054861690911790556001600160401b03909616600160a01b02929092166001600160e01b03199095169490941790911790556006805492909116660100000000000002600160301b600160d01b031990921691909117905561022d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146101bc57600080fd5b919050565b600080600080600060a086880312156101d957600080fd5b85516001600160401b03811681146101f057600080fd5b94506101fe602087016101a5565b935061020c604087016101a5565b925060608601519150610221608087016101a5565b90509295509295909350565b60805160601c610bfe6102526000396000818161067701526106b90152610bfe6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806351312afe116100ad5780639854471011610071578063985447101461029f578063a3e56fa8146102b2578063bcadffd0146102c5578063f2fde38b146102d8578063f9a5d00d146102eb57600080fd5b806351312afe1461024357806361728f3914610263578063630dc7cb1461026c578063715018a6146102865780638da5cb5b1461028e57600080fd5b80631fe543e3116100f45780631fe543e314610191578063219be114146101a457806324f74697146101df5780632fa2cb4e146101ef578063463fb8c61461021d57600080fd5b806319c01989146101265780631bc5f5071461013b5780631c3c0ea81461014e5780631c4695f414610161575b600080fd5b610139610134366004610af4565b61030b565b005b610139610149366004610af4565b610507565b61013961015c36600461099d565b610635565b600454610174906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013961019f366004610a23565b61066c565b6101ca6101b23660046109cd565b60076020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610188565b6006546101ca9063ffffffff1681565b61020f6101fd3660046109cd565b600a6020526000908152604090205481565b604051908152602001610188565b6101ca61022b3660046109cd565b60009081526007602052604090205463ffffffff1690565b61020f6102513660046109cd565b60086020526000908152604090205481565b61020f60055481565b60065461017490600160301b90046001600160a01b031681565b6101396106f4565b6000546001600160a01b0316610174565b6101396102ad3660046109cd565b610708565b600354610174906001600160a01b031681565b6101396102d33660046109e6565b610715565b6101396102e636600461099d565b610741565b61020f6102f93660046109cd565b60096020526000908152604090205481565b600654600160301b90046001600160a01b031633146103715760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c79204c75636b732063616e2072657152616e646f6d4e756d626572000060448201526064015b60405180910390fd5b600081116103b55760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081b585e081a5b9c1d5d607a1b6044820152606401610368565b6000828152600a6020526040902054156103cd575050565b600180546005546002546006546040516305d3b1d360e41b81526004810193909352600160a01b90910467ffffffffffffffff166024830152640100000000810461ffff16604483015263ffffffff16606482015260848101929092526000916001600160a01b0390911690635d3b1d309060a401602060405180830381600087803b15801561045c57600080fd5b505af1158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190610a0a565b600081815260086020908152604080832087905560098252808320869055868352600a82529182902083905581518681529081018590529081018290529091507f3f13685560bd8b2517f69ad10b1e2367cc13dc8df09b982ad90e1119c6337c9f906060015b60405180910390a1505050565b61050f6107ba565b6000828152600a602052604081205460065490919061053a90640100000000900461ffff1643610b4d565b4043446105474287610b2e565b6105519190610b2e565b61055b9190610b2e565b6105659190610b2e565b60405160200161057791815260200190565b60408051601f198184030181529181528151602092830120600085815260099093529120549091506105a99082610b64565b6105b4906001610b16565b6000858152600760208181526040808420805463ffffffff191663ffffffff96909616958617905560088252928390205491815282518881529081019190915290810183905260608101919091527f80bb76aef7e4ff2d1394b73868c9a3d09c1dddeff2c0c0c1d2567da7f4cd787e9060800160405180910390a150505050565b61063d6107ba565b600680546001600160a01b03909216600160301b026601000000000000600160d01b0319909216919091179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106e65760405163073e64fd60e21b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604401610368565b6106f08282610814565b5050565b6106fc6107ba565b610706600061094d565b565b6107106107ba565b600555565b61071d6107ba565b6006805461ffff9092166401000000000265ffff0000000019909216919091179055565b6107496107ba565b6001600160a01b0381166107ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610368565b6107b78161094d565b50565b6000546001600160a01b031633146107065760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610368565b600082815260086020526040902054806108705760405162461bcd60e51b815260206004820152601960248201527f57726f6e67207461736b4964206f7220726571756573744964000000000000006044820152606401610368565b60008381526009602052604081205483519091849161089157610891610b9c565b60200260200101516108a39190610b64565b6108ae906001610b16565b6000828152600760205260408120805463ffffffff191663ffffffff939093169290921790915582517f80bb76aef7e4ff2d1394b73868c9a3d09c1dddeff2c0c0c1d2567da7f4cd787e9183918691869161090b5761090b610b9c565b602090810291909101810151600086815260078352604090819020548151958652928501939093529183019190915263ffffffff1660608201526080016104fa565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156109af57600080fd5b81356001600160a01b03811681146109c657600080fd5b9392505050565b6000602082840312156109df57600080fd5b5035919050565b6000602082840312156109f857600080fd5b813561ffff811681146109c657600080fd5b600060208284031215610a1c57600080fd5b5051919050565b60008060408385031215610a3657600080fd5b8235915060208084013567ffffffffffffffff80821115610a5657600080fd5b818601915086601f830112610a6a57600080fd5b813581811115610a7c57610a7c610bb2565b8060051b604051601f19603f83011681018181108582111715610aa157610aa1610bb2565b604052828152858101935084860182860187018b1015610ac057600080fd5b600095505b83861015610ae3578035855260019590950194938601938601610ac5565b508096505050505050509250929050565b60008060408385031215610b0757600080fd5b50508035926020909101359150565b60008219821115610b2957610b29610b86565b500190565b6000816000190483118215151615610b4857610b48610b86565b500290565b600082821015610b5f57610b5f610b86565b500390565b600082610b8157634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220901620089b8b41f62c0227e585aa577ca924fa9ab8786462943867d52546f46c64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806351312afe116100ad5780639854471011610071578063985447101461029f578063a3e56fa8146102b2578063bcadffd0146102c5578063f2fde38b146102d8578063f9a5d00d146102eb57600080fd5b806351312afe1461024357806361728f3914610263578063630dc7cb1461026c578063715018a6146102865780638da5cb5b1461028e57600080fd5b80631fe543e3116100f45780631fe543e314610191578063219be114146101a457806324f74697146101df5780632fa2cb4e146101ef578063463fb8c61461021d57600080fd5b806319c01989146101265780631bc5f5071461013b5780631c3c0ea81461014e5780631c4695f414610161575b600080fd5b610139610134366004610af4565b61030b565b005b610139610149366004610af4565b610507565b61013961015c36600461099d565b610635565b600454610174906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013961019f366004610a23565b61066c565b6101ca6101b23660046109cd565b60076020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610188565b6006546101ca9063ffffffff1681565b61020f6101fd3660046109cd565b600a6020526000908152604090205481565b604051908152602001610188565b6101ca61022b3660046109cd565b60009081526007602052604090205463ffffffff1690565b61020f6102513660046109cd565b60086020526000908152604090205481565b61020f60055481565b60065461017490600160301b90046001600160a01b031681565b6101396106f4565b6000546001600160a01b0316610174565b6101396102ad3660046109cd565b610708565b600354610174906001600160a01b031681565b6101396102d33660046109e6565b610715565b6101396102e636600461099d565b610741565b61020f6102f93660046109cd565b60096020526000908152604090205481565b600654600160301b90046001600160a01b031633146103715760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c79204c75636b732063616e2072657152616e646f6d4e756d626572000060448201526064015b60405180910390fd5b600081116103b55760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081b585e081a5b9c1d5d607a1b6044820152606401610368565b6000828152600a6020526040902054156103cd575050565b600180546005546002546006546040516305d3b1d360e41b81526004810193909352600160a01b90910467ffffffffffffffff166024830152640100000000810461ffff16604483015263ffffffff16606482015260848101929092526000916001600160a01b0390911690635d3b1d309060a401602060405180830381600087803b15801561045c57600080fd5b505af1158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190610a0a565b600081815260086020908152604080832087905560098252808320869055868352600a82529182902083905581518681529081018590529081018290529091507f3f13685560bd8b2517f69ad10b1e2367cc13dc8df09b982ad90e1119c6337c9f906060015b60405180910390a1505050565b61050f6107ba565b6000828152600a602052604081205460065490919061053a90640100000000900461ffff1643610b4d565b4043446105474287610b2e565b6105519190610b2e565b61055b9190610b2e565b6105659190610b2e565b60405160200161057791815260200190565b60408051601f198184030181529181528151602092830120600085815260099093529120549091506105a99082610b64565b6105b4906001610b16565b6000858152600760208181526040808420805463ffffffff191663ffffffff96909616958617905560088252928390205491815282518881529081019190915290810183905260608101919091527f80bb76aef7e4ff2d1394b73868c9a3d09c1dddeff2c0c0c1d2567da7f4cd787e9060800160405180910390a150505050565b61063d6107ba565b600680546001600160a01b03909216600160301b026601000000000000600160d01b0319909216919091179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106e65760405163073e64fd60e21b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604401610368565b6106f08282610814565b5050565b6106fc6107ba565b610706600061094d565b565b6107106107ba565b600555565b61071d6107ba565b6006805461ffff9092166401000000000265ffff0000000019909216919091179055565b6107496107ba565b6001600160a01b0381166107ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610368565b6107b78161094d565b50565b6000546001600160a01b031633146107065760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610368565b600082815260086020526040902054806108705760405162461bcd60e51b815260206004820152601960248201527f57726f6e67207461736b4964206f7220726571756573744964000000000000006044820152606401610368565b60008381526009602052604081205483519091849161089157610891610b9c565b60200260200101516108a39190610b64565b6108ae906001610b16565b6000828152600760205260408120805463ffffffff191663ffffffff939093169290921790915582517f80bb76aef7e4ff2d1394b73868c9a3d09c1dddeff2c0c0c1d2567da7f4cd787e9183918691869161090b5761090b610b9c565b602090810291909101810151600086815260078352604090819020548151958652928501939093529183019190915263ffffffff1660608201526080016104fa565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156109af57600080fd5b81356001600160a01b03811681146109c657600080fd5b9392505050565b6000602082840312156109df57600080fd5b5035919050565b6000602082840312156109f857600080fd5b813561ffff811681146109c657600080fd5b600060208284031215610a1c57600080fd5b5051919050565b60008060408385031215610a3657600080fd5b8235915060208084013567ffffffffffffffff80821115610a5657600080fd5b818601915086601f830112610a6a57600080fd5b813581811115610a7c57610a7c610bb2565b8060051b604051601f19603f83011681018181108582111715610aa157610aa1610bb2565b604052828152858101935084860182860187018b1015610ac057600080fd5b600095505b83861015610ae3578035855260019590950194938601938601610ac5565b508096505050505050509250929050565b60008060408385031215610b0757600080fd5b50508035926020909101359150565b60008219821115610b2957610b29610b86565b500190565b6000816000190483118215151615610b4857610b48610b86565b500290565b600082821015610b5f57610b5f610b86565b500390565b600082610b8157634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220901620089b8b41f62c0227e585aa577ca924fa9ab8786462943867d52546f46c64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reqRandomNumber(uint256,uint256)": {
        "params": {
          "max": ": max provided by the LucksExecutor (lastTicketId)"
        }
      },
      "setExecutor(address)": {
        "params": {
          "_executor": ": address of the PancakeSwap crowdluck"
        }
      },
      "setKeyHash(bytes32)": {
        "params": {
          "_keyHash": ": new keyHash"
        }
      },
      "setReqConfirmations(uint16)": {
        "params": {
          "num": ": num"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Openluck VRF",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "callbackRandomWords(uint256,uint256)": {
        "notice": "Callback for enmergency case"
      },
      "reqRandomNumber(uint256,uint256)": {
        "notice": "Request randomness from a user-provided max"
      },
      "setExecutor(address)": {
        "notice": "Set the address for the Lucks"
      },
      "setKeyHash(bytes32)": {
        "notice": "Change the keyHash"
      },
      "setReqConfirmations(uint16)": {
        "notice": "Change the requestConfirmations"
      },
      "viewRandomResult(uint256)": {
        "notice": "View random result"
      }
    },
    "notice": "It is the contract for Randomness Number Generation",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 941,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13474,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(VRFCoordinatorV2Interface)306"
      },
      {
        "astId": 13477,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "LINKTOKEN",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)210"
      },
      {
        "astId": 13479,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "s_subscriptionId",
        "offset": 20,
        "slot": "2",
        "type": "t_uint64"
      },
      {
        "astId": 13481,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 13483,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "link",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 13485,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "keyHash",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 13488,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 13491,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 13493,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "EXECUTOR",
        "offset": 6,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 13497,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "randomResults",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 13501,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "requestToTaskId",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13505,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "requestToMaxNum",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13509,
        "contract": "contracts/other/VRF.sol:VRF",
        "label": "taskToRequestId",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LinkTokenInterface)210": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)306": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}