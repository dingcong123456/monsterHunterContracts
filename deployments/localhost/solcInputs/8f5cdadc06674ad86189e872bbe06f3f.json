{
  "language": "Solidity",
  "sources": {
    "contracts/Execute.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Arrays.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport {IExecutor, TaskItem, TaskExt, TaskStatus, Ticket, TaskInfo, UserState, TaskInvite} from \"./interfaces/IExecutor.sol\";\nimport {IProxyNFTStation, DepositNFT} from \"./interfaces/IProxyNFTStation.sol\";\nimport {IProxyTokenStation} from \"./interfaces/IProxyTokenStation.sol\";\nimport {IHelper} from \"./interfaces/IHelper.sol\";\nimport {Validator} from \"./libraries/Validator.sol\";\n\ncontract Executor is IExecutor, ReentrancyGuardUpgradeable, OwnableUpgradeable {\n    using SafeMath for uint256;\n    using Arrays for uint256[];\n    using Counters for Counters.Counter;\n    Counters.Counter private ids;\n\n    // ============ interfaces ============\n    IHelper public HELPER;\n    IProxyNFTStation public NFT;\n    IProxyTokenStation public TOKEN;\n\n    bool public isAllowTask;\n\n    // ============ Public Mutable Storage ============\n\n    mapping(uint256 => TaskItem) public tasks; // store tasks info by taskId\n    mapping(uint256 => TaskInfo) public infos; // store task updated info (taskId=>TaskInfo)\n    mapping(uint256 => mapping(uint256 => Ticket)) public tickets; // store tickets (taskId => ticketId => ticket)\n    mapping(uint256 => uint256[]) public ticketIds; // store ticket ids (taskId => lastTicketIds)\n    mapping(address => mapping(uint256 => UserState)) public userState; // Keep track of user ticket ids for a given taskId (user => taskId => userstate)\n    mapping(address => uint256) public userCount; // Number of user joins\n\n    mapping(uint256 => TaskInvite) private invites; // store task invite info (taskId=>TaskInvite)\n\n    // ======== Constructor =========\n\n    /**\n     * @notice Constructor / initialize\n     * @param _allowTask allow running task\n     */\n    function initialize(bool _allowTask) external initializer {\n        __ReentrancyGuard_init();\n        __Ownable_init();\n        isAllowTask = _allowTask;\n    }\n\n    //  ============ Modifiers  ============\n\n    modifier isExists(uint256 taskId) {\n        require(exists(taskId), \"not exists\");\n        _;\n    }\n\n    // ============ Public functions ============\n\n    function count() public view override returns (uint256) {\n        return ids.current();\n    }\n\n    function exists(uint256 taskId) public view override returns (bool) {\n        return taskId > 0 && taskId <= ids.current();\n    }\n\n    function getTask(uint256 taskId)\n        public\n        view\n        override\n        returns (TaskItem memory)\n    {\n        return tasks[taskId];\n    }\n\n    function getInfo(uint256 taskId)\n        public\n        view\n        override\n        returns (TaskInfo memory)\n    {\n        return infos[taskId];\n    }\n\n    function isFail(uint256 taskId) public view override returns (bool) {\n        return\n            tasks[taskId].status == TaskStatus.Fail ||\n            (tasks[taskId].amountCollected < tasks[taskId].targetAmount &&\n                block.timestamp > tasks[taskId].endTime);\n    }\n\n    function getUserState(uint256 taskId, address user)\n        external\n        view\n        override\n        returns (UserState memory)\n    {\n        return userState[user][taskId];\n    }\n\n    function getUserCount(address user)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return userCount[user];\n    }\n\n    function createTask(TaskItem memory item, TaskExt memory ext)\n        external\n        payable\n        override\n        nonReentrant\n    {\n        require(address(NFT) != address(0), \"ProxyNFT\");\n\n        // inputs validation\n        Validator.checkNewTask(msg.sender, item);\n        Validator.checkNewTaskNFTs(\n            msg.sender,\n            item.nftContract,\n            item.tokenIds,\n            item.tokenAmounts,\n            HELPER\n        );\n        Validator.checkNewTaskExt(ext);\n\n        // Transfer nfts to proxy station (NFTChain)\n        // in case of dst chain transection fail, enable user redeem nft back, after endTime\n        item.depositId = NFT.deposit(\n            msg.sender,\n            item.nftContract,\n            item.tokenIds,\n            item.tokenAmounts,\n            item.endTime\n        );\n\n        // Create Task Item\n        _createTask(item, ext);\n    }\n\n    /**\n    @notice Use the original NFTs to reCreateTask\n    Only if the task fails or can be cancelled\n    and the NFTs has not been claimed\n     */\n    function reCreateTask(\n        uint256 taskId,\n        TaskItem memory item,\n        TaskExt memory ext\n    ) external payable override nonReentrant {\n        Validator.checkReCreateTask(tasks, userState, taskId, item, ext);\n\n        // update originTask claim info\n        userState[tasks[taskId].seller][taskId].claimed = true;\n\n        // update task status\n        if (tasks[taskId].amountCollected > 0) {\n            tasks[taskId].status = TaskStatus.Fail;\n            emit CloseTask(taskId, msg.sender, tasks[taskId].status);\n        } else {\n            tasks[taskId].status = TaskStatus.Cancel;\n            emit CancelTask(taskId, msg.sender);\n        }\n\n        // create new task\n        _createTask(item, ext);\n    }\n\n    /**\n    @notice buyer join a task\n    num: how many ticket\n    */\n    function joinTask(\n        address InvitePerson,\n        uint256 taskId,\n        uint32 num,\n        string memory note\n    ) external payable override isExists(taskId) nonReentrant {\n        // check inputs and task\n        Validator.checkJoinTask(tasks[taskId], msg.sender, num, note, HELPER);\n\n        // Calculate number of TOKEN to this contract\n        uint256 amount = tasks[taskId].price.mul(num);\n        \n        if( invites[taskId].balance[InvitePerson] == 0 ){\n            invites[taskId].balanceKeys.push(InvitePerson);\n        }\n        invites[taskId].balance[InvitePerson] += num;\n\n        // deposit payment to token station.\n        TOKEN.deposit(\n            msg.sender,\n            tasks[taskId].acceptToken,\n            amount\n        );\n\n        // create tickets\n        uint256 lastTID = _createTickets(taskId, num, msg.sender);\n\n        // update task item info\n        if (tasks[taskId].status == TaskStatus.Pending) {\n            tasks[taskId].status = TaskStatus.Open;\n        }\n        tasks[taskId].amountCollected = tasks[taskId].amountCollected.add(\n            amount\n        );\n\n        //if reach target amount, trigger to close task\n        if (tasks[taskId].amountCollected >= tasks[taskId].targetAmount) {\n            if (address(HELPER.getAutoClose()) != address(0)) {\n                HELPER.getAutoClose().addTask(taskId, tasks[taskId].endTime);\n            }\n        }\n\n        emit JoinTask(taskId, msg.sender, amount, num, lastTID, note);\n    }\n\n    /**\n    @notice seller cancel the task, only when task status equal to 'Pending' or no funds amount\n    */\n    function cancelTask(uint256 taskId)\n        external\n        payable\n        override\n        isExists(taskId)\n        nonReentrant\n    {\n        require(\n            (tasks[taskId].status == TaskStatus.Pending ||\n                tasks[taskId].status == TaskStatus.Open) &&\n                infos[taskId].lastTID <= 0,\n            \"Opening or canceled\"\n        );\n        require(tasks[taskId].seller == msg.sender, \"Owner\"); // only seller can cancel\n\n        // update status\n        tasks[taskId].status = TaskStatus.Close;\n\n        _withdrawNFTs(taskId, payable(tasks[taskId].seller));\n\n        emit CancelTask(taskId, msg.sender);\n    }\n\n    /**\n    @notice finish a Task, \n    case 1: reach target crowd amount, status success, and start to pick a winner\n    case 2: time out and not reach the target amount, status close, and returns funds to claimable pool\n    */\n    function closeTask(uint256 taskId)\n        external\n        payable\n        override\n        isExists(taskId)\n        nonReentrant\n    {\n        require(tasks[taskId].status == TaskStatus.Open, \"Not Open\");\n        require(\n            tasks[taskId].amountCollected >= tasks[taskId].targetAmount ||\n                block.timestamp > tasks[taskId].endTime,\n            \"Not reach target or not expired\"\n        );\n\n        // mark operation time\n        infos[taskId].closeTime = block.timestamp;\n\n        if (tasks[taskId].amountCollected >= tasks[taskId].targetAmount) {\n            // Reached task target\n            // update task, Task Close & start to draw\n            tasks[taskId].status = TaskStatus.Close;\n\n            // Request a random number from the generator based on a seed(max ticket number)\n            HELPER.getVRF().reqRandomNumber(taskId, infos[taskId].lastTID);\n\n            // add to auto draw Queue\n            if (address(HELPER.getAutoDraw()) != address(0)) {\n                HELPER.getAutoDraw().addTask(\n                    taskId,\n                    block.timestamp + HELPER.getDrawDelay()\n                );\n            }\n\n            // cancel the auto close queue if seller open directly\n            if (\n                msg.sender == tasks[taskId].seller &&\n                address(HELPER.getAutoClose()) != address(0)\n            ) {\n                HELPER.getAutoClose().removeTask(taskId);\n            }\n        } else {\n            // Task Fail & Expired\n            // update task\n            tasks[taskId].status = TaskStatus.Fail;\n\n            // NFTs back to seller\n            _withdrawNFTs(taskId, payable(tasks[taskId].seller));\n        }\n\n        emit CloseTask(taskId, msg.sender, tasks[taskId].status);\n    }\n\n    /**\n    @notice start to picker a winner via chainlink VRF\n    */\n    function pickWinner(uint256 taskId)\n        external\n        payable\n        override\n        isExists(taskId)\n        nonReentrant\n    {\n        require(tasks[taskId].status == TaskStatus.Close, \"Not Close\");\n\n        // get drawn number from Chainlink VRF\n        uint32 finalNo = HELPER.getVRF().viewRandomResult(taskId);\n        require(finalNo > 0, \"Not Drawn\");\n        require(finalNo <= infos[taskId].lastTID, \"finalNo\");\n\n        // find winner by drawn number\n        Ticket memory ticket = _findWinner(taskId, finalNo);\n        require(ticket.number > 0, \"Lost winner\");\n\n        // update store item\n        tasks[taskId].status = TaskStatus.Success;\n        infos[taskId].finalNo = ticket.number;\n\n        // withdraw NFTs to winner\n        _withdrawNFTs(taskId, payable(ticket.owner));\n\n        // dispatch Payment\n        _payment(taskId, ticket.owner);\n\n        emit PickWinner(taskId, ticket.owner, finalNo);\n    }\n\n     /**\n    @notice when taskItem Fail, user can claim tokens back \n    */\n    function claimTokens(uint256[] memory taskIds) override external nonReentrant\n    {\n        for (uint256 i = 0; i < taskIds.length; i++) {\n            _claimToken(taskIds[i]);\n        }\n    }\n\n    /**\n    @notice when taskItem Fail, user can claim NFTs back (cross-chain case)\n    */\n    function claimNFTs(uint256[] memory taskIds) override external payable nonReentrant\n    {  \n        for (uint256 i = 0; i < taskIds.length; i++) {\n            _claimNFTs(taskIds[i]);\n        }\n    }\n\n    // ============ Internal functions ============\n\n    function _createTask(TaskItem memory item, TaskExt memory ext) internal {\n        require(isAllowTask, \"Not allow\");\n        Validator.checkNewTaskRemote(item, HELPER);\n\n        //create TaskId\n        ids.increment();\n        uint256 taskId = ids.current();\n\n        // start now\n        if (item.status == TaskStatus.Open) {\n            item.startTime = item.startTime < block.timestamp\n                ? item.startTime\n                : block.timestamp;\n        } else {\n            require(\n                block.timestamp <= item.startTime &&\n                    item.startTime < item.endTime,\n                \"endTime\"\n            );\n            // start in future\n            item.status = TaskStatus.Pending;\n        }\n\n        //store taskItem\n        tasks[taskId] = item;\n        emit CreateTask(taskId, item, ext);\n    }\n\n    function _createTickets(\n        uint256 taskId,\n        uint32 num,\n        address buyer\n    ) internal returns (uint256) {\n        uint256 start = infos[taskId].lastTID.add(1);\n        uint256 lastTID = start.add(num).sub(1);\n\n        tickets[taskId][lastTID] = Ticket(lastTID, num, buyer);\n        ticketIds[taskId].push(lastTID);\n\n        userState[buyer][taskId].num += num;\n        infos[taskId].lastTID = lastTID;\n\n        emit CreateTickets(taskId, buyer, num, start, lastTID);\n        return lastTID;\n    }\n\n    function _withdrawNFTs(uint256 taskId, address payable user) internal {\n        _doWithdrawNFTs(tasks[taskId].depositId, user);\n    }\n\n    function _doWithdrawNFTs(uint256 depositId, address user) internal {\n        NFT.withdraw(depositId, user);\n    }\n\n    function _findWinner(uint256 taskId, uint32 number)\n        internal\n        view\n        returns (Ticket memory)\n    {\n        // find by ticketId\n        Ticket memory ticket = tickets[taskId][number];\n\n        if (ticket.number == 0) {\n            uint256 idx = ticketIds[taskId].findUpperBound(number);\n            uint256 lastTID = ticketIds[taskId][idx];\n            ticket = tickets[taskId][lastTID];\n        }\n\n        return ticket;\n    }\n\n\n    /**\n     * @notice transfer protocol fee and funds\n     * @param taskId taskId\n     * @param winner winner address\n     * paymentStrategy for winner share is up to 50% (500 = 5%, 5,000 = 50%)\n     */\n    function _payment(uint256 taskId, address winner) internal\n    {\n        // inner variables\n        address acceptToken = tasks[taskId].acceptToken;\n\n        // Calculate amount to seller\n        uint256 collected = tasks[taskId].amountCollected;\n        uint256 price = tasks[taskId].price;\n        uint256 sellerAmount = collected;\n\n        // 1. Calculate protocol fee\n        uint256 fee = (collected.mul(HELPER.getProtocolFee())).div(10000);\n        address feeRecipient = HELPER.getProtocolFeeRecipient();\n        require(fee >= 0, \"fee\");\n        sellerAmount = sellerAmount.sub(fee);\n\n        // 3. transfer funds\n\n        // transfer protocol fee\n        _transferOut(acceptToken, feeRecipient, fee);\n        emit TransferFee(taskId, feeRecipient, acceptToken, fee);     \n\n       uint256 inviteFee = _share(taskId,collected,price,acceptToken);\n         sellerAmount = sellerAmount.sub(inviteFee);\n          \n\n        // transfer funds to seller\n        _transferOut(acceptToken, tasks[taskId].seller, sellerAmount);  \n\n        emit TransferPayment(taskId, tasks[taskId].seller, acceptToken, sellerAmount);                    \n    }\n\n    function _share(  uint256 taskId,uint256 collected, uint256 price,address acceptToken) internal returns(uint256 inviteFee){\n    // transfer share\n        uint256 inviteFee =(collected.mul(HELPER.getProtocolInviteFee())).div(10000); \n      \n        uint256 inviteFeeRate = HELPER.getProtocolInviteFee();\n        address inviteFeeRecipient = HELPER.getProtocolInviteFeeRecipient();\n        uint256 count = 0;\n        TaskInvite storage invitesBytaskId = invites[taskId];\n         for (uint i=0; i < invitesBytaskId.balanceKeys.length; i++) {   \n                address splitAddr = invitesBytaskId.balanceKeys[i];\n                uint256 splitAmount;\n                {\n                    splitAmount = price.mul(invitesBytaskId.balance[splitAddr]);\n                }\n                {\n                     splitAmount = splitAmount.mul(inviteFeeRate).div(10000);\n                }\n                count += splitAmount;\n                _transferOut(acceptToken, splitAddr, splitAmount);\n                emit TransferShareAmount(taskId, splitAddr, acceptToken, splitAmount); \n            \n         }\n\n         uint256 residueInviteFee = inviteFee.sub(count);\n         if(residueInviteFee > 0){\n            _transferOut(acceptToken, inviteFeeRecipient, residueInviteFee);\n            emit TransferShareAmount(taskId, inviteFeeRecipient, acceptToken, residueInviteFee); \n         }\n         return inviteFee;\n    }\n\n\n    function _transferOut(address token, address to, uint256 amount) internal {        \n        TOKEN.withdraw(to, token, amount);\n    }  \n\n        function _claimToken(uint256 taskId) internal isExists(taskId)\n    {\n        TaskItem storage item = tasks[taskId];\n        require(isFail(taskId), \"Not Fail\");\n        require(userState[msg.sender][taskId].claimed == false, \"Claimed\");\n\n        // Calculate the funds buyer payed\n        uint256 amount = item.price.mul(userState[msg.sender][taskId].num);\n        \n        // update claim info\n        userState[msg.sender][taskId].claimed = true;\n        \n        // Transfer\n        _transferOut(item.acceptToken, msg.sender, amount);\n\n        emit ClaimToken(taskId, msg.sender, amount, item.acceptToken);\n    }\n\n\n    function _claimNFTs(uint256 taskId) internal isExists(taskId)\n    {\n        address seller = tasks[taskId].seller;\n        require(isFail(taskId), \"Not Fail\");\n        require(userState[seller][taskId].claimed == false, \"Claimed\");\n        \n        // update claim info\n        userState[seller][taskId].claimed = true;\n        \n        // withdraw NFTs to winner (maybe cross chain)     \n        _withdrawNFTs(taskId, payable(seller));\n\n        emit ClaimNFT(taskId, seller, tasks[taskId].nftContract, tasks[taskId].tokenIds);\n    }\n\n        //  ============ onlyOwner  functions  ============\n\n    function setAllowTask(bool enable) external onlyOwner {\n        isAllowTask = enable;\n    }\n\n    function setHelper(IHelper addr) external onlyOwner {\n        HELPER = addr;\n    }\n\n    function setProxy(IProxyTokenStation _token, IProxyNFTStation _nft) external onlyOwner {\n        if (isAllowTask) {\n            require(address(_token) != address(0x0), \"TOKEN\");\n        }\n        require(address(_nft) != address(0x0), \"NFT\");\n        TOKEN = _token;\n        NFT = _nft;\n    }\n\n        // ============ Remote(destination) functions ============\n    \n    function onLzReceive(uint8 functionType, bytes memory _payload) override external onlyOwner {\n     \n        if (functionType == 1) { //TYPE_CREATE_TASK\n            (, TaskItem memory item, TaskExt memory ext) = abi.decode(_payload, (uint256, TaskItem, TaskExt));             \n\n            _createTask(item, ext);\n                    \n        } else if (functionType == 2) { //TYPE_WITHDRAW_NFT\n            (, address user, uint256 depositId) = abi.decode(_payload, (uint8, address, uint256));                        \n            _doWithdrawNFTs(depositId, user);\n        }\n    } \n}\n\n\n"
    },
    "contracts/interfaces/IExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n/** \n    TaskStatus\n    0) Pending: task created but not reach starttime\n    1) Open: task opening\n    2) Close: task close, waiting for draw\n    3) Success: task reach target, drawed winner\n    4) Fail: task Fail and expired\n    5) Cancel: task user cancel\n */\nenum TaskStatus {\n    Pending,\n    Open,\n    Close,\n    Success,\n    Fail,\n    Cancel\n}\n\n\n\nstruct TaskItem {\n\n    address seller; // Owner of the NFTs  \n    address nftContract; // NFT registry address    \n    uint256[] tokenIds; // Allow mulit nfts for sell    \n    uint256[] tokenAmounts; // support ERC1155\n    \n    address acceptToken; // acceptToken    \n    TaskStatus status; // Task status    \n\n    uint256 startTime; // Task start time    \n    uint256 endTime; // Task end time\n    \n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \n    uint256 price; // Per ticket price  (in wei)    \n    \n    uint256 copyId;     // game copy id\n    \n    // editable fields\n    uint256 amountCollected; // The amount (in wei) collected of this task\n    uint256 depositId; // NFTs depositId (system set)\n\n    \n}\n\nstruct TaskExt {\n    string title; // title (for searching keywords)  \n    string note;   // memo\n}\n\nstruct TaskInvite {\n    mapping(address=>uint256) balance;\n    address[] balanceKeys;\n}\n\nstruct Ticket {\n    uint256 number;  // the ticket's id, equal to the end number (last ticket id)\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\n    address owner;  // ticket owner\n}\n\nstruct TaskInfo {\n    uint256 lastTID;\n    uint256 closeTime;\n    uint256 finalNo;\n}\n \nstruct UserState {\n    uint256 num; // user buyed tickets count\n    bool claimed;  // user claimed\n}\ninterface IExecutor {\n\n    // ============= events ====================\n\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\n    event CancelTask(uint256 taskId, address seller);\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint256 number,string note);\n    event PickWinner(uint256 taskId, address winner, uint256 number);\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\n    event ClaimNFT(uint256 taskId, address seller, address nftContract, uint256[] tokenIds);    \n    event CreateTickets(uint256 taskId, address buyer, uint256 num, uint256 start, uint256 end);\n\n    event TransferFee(uint256 taskId, address to, address token, uint256 amount); // for protocol\n    event TransferShareAmount(uint256 taskId, address to, address token, uint256 amount); // for winners\n    event TransferPayment(uint256 taskId, address to, address token, uint256 amount); // for seller\n\n    // ============= functions ====================\n\n    function count() external view returns (uint256);\n    function exists(uint256 taskId) external view returns (bool);\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\n    function getInfo(uint256 taskId) external view returns (TaskInfo memory);\n    function isFail(uint256 taskId) external view returns(bool);\n    function getUserCount(address user) external view returns (uint256);\n    function getUserState(uint256 taskId, address user) external view returns(UserState memory);\n\n    function createTask(TaskItem memory item, TaskExt memory ext) external payable;\n    function reCreateTask(uint256 taskId, TaskItem memory item, TaskExt memory ext) external payable;\n    function joinTask(address  InvitePerson, uint256 taskId, uint32 num, string memory note) external payable;\n    function cancelTask(uint256 taskId) external payable;\n    function closeTask(uint256 taskId) external payable;\n    function pickWinner(uint256 taskId) external payable;\n\n    function claimTokens(uint256[] memory taskIds) external;\n    function claimNFTs(uint256[] memory taskIds) external payable;\n\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\n}\n"
    },
    "contracts/interfaces/IProxyNFTStation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nstruct DepositNFT {\n    address user; // deposit user\n    address nftContract; // NFT registry address    \n    uint256[] tokenIds; // Allow mulit nfts for sell    \n    uint256[] amounts; // support ERC1155\n    uint256 endTime; // Task end time\n}\n\ninterface IProxyNFTStation {\n\n    event Deposit(address indexed executor, uint256 depositId, address indexed user, address nft, uint256[] tokenIds, uint256[] amounts, uint256 endTime);\n    event Withdraw(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\n    event Redeem(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\n\n    function getNFT(address executor, uint256 depositId) external view returns(DepositNFT memory);\n    function deposit(address user, address nft, uint256[] memory tokenIds, uint256[] memory amounts, uint256 endTime) external payable returns (uint256 depositId);    \n    function withdraw(uint256 depositId, address to) external;    \n    function redeem(address executor, uint256 depositId, address to) external;    \n}"
    },
    "contracts/interfaces/IProxyTokenStation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IProxyTokenStation {\n\n    event Deposit(address indexed executor, address indexed user, address token, uint256 amount);\n    event Withdraw(address indexed executor, address indexed user, address token, uint256 amount);\n\n    function deposit(address user, address token, uint256 amount) external payable;\n    function withdraw(address user, address token, uint256 amount) external;\n}"
    },
    "contracts/interfaces/IHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// OpenZeppelin contracts\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// Openluck interfaces\nimport {TaskItem, TaskExt} from \"./IExecutor.sol\";\nimport {IVRF} from \"./IVRF.sol\";\nimport {IAuto} from \"./IAuto.sol\";\n\nimport {IProxyNFTStation} from \"./IProxyNFTStation.sol\";\n\ninterface IHelper {\n\n    function checkPerJoinLimit(uint32 num) external view returns (bool);\n    function checkAcceptToken(address acceptToken) external view returns (bool);\n    function checkNFTContract(address addr) external view returns (bool);\n    function checkNewTask(address user, TaskItem memory item) external view returns (bool);\n    function checkNewTaskExt(TaskExt memory ext) external pure returns (bool);\n    function checkNewTaskRemote(TaskItem memory item) external view returns (bool);\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) external view returns (bool);\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool,string memory);    \n    function checkExclusive(address account, address token, uint256 amount) external view returns (bool);\n\n    function getProtocolFeeRecipient() external view returns (address);\n    function getProtocolFee() external view returns (uint256);\n    function getProtocolInviteFeeRecipient() external view returns (address);\n    function getProtocolInviteFee() external view returns (uint256);\n    function getMinTargetLimit(address token) external view returns (uint256);\n    function getDrawDelay() external view returns (uint32);\n\n    function getVRF() external view returns (IVRF);\n    function getAutoClose() external view returns (IAuto);\n    function getAutoDraw() external view returns (IAuto);\n\n}\n"
    },
    "contracts/libraries/Validator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// OpenZeppelin contracts\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n// Openluck interfaces\nimport {TaskItem, TaskExt, TaskStatus, UserState} from \"../interfaces/IExecutor.sol\";\nimport {IHelper} from \"../interfaces/IHelper.sol\";\n\nlibrary Validator {\n    \n    using SafeMath for uint256;   \n    using AddressUpgradeable for address;\n\n    /**\n     * @notice check the new task inputs\n     */\n    function checkNewTask(address user, TaskItem memory item) internal view returns(bool) { \n\n        require(item.seller != address(0) && item.seller == user, \"seller\");            \n        require(item.tokenIds.length > 0, \"tokenIds\");\n        require(block.timestamp < item.endTime, \"endTime\");\n        require(item.endTime - block.timestamp > 84600 && item.endTime - block.timestamp < 2678400, \"duration\"); // at least 23.5 hour, 31 days limit\n        require(item.price > 0 && item.price < item.targetAmount && item.targetAmount.mod(item.price) == 0,\"price or targetAmount\");\n\n        uint num = item.targetAmount.div(item.price);\n        require(num > 0 && num <= 100000 && num.mod(10) == 0, \"num\");\n\n        require(item.amountCollected == 0, \"collect\");        \n\n        return true;\n    }\n\n    function checkNewTaskNFTs(address seller, address nft, uint256[] memory tokenIds, uint256[] memory amounts,IHelper HELPER) internal view {\n        // check nftContract\n        require(HELPER.checkNFTContract(nft), \"nft\");\n        (bool checkState, string memory checkMsg) = HELPER.checkTokenListing(nft, seller, tokenIds, amounts);\n        require(checkState, checkMsg);\n    }\n\n    function checkNewTaskExt(TaskExt memory ext) internal pure returns(bool) {\n        require(bytes(ext.title).length >=0 && bytes(ext.title).length <= 256, \"title\");\n        require(bytes(ext.note).length <= 256, \"note\");\n        return true;\n    }\n\n    function checkNewTaskRemote(TaskItem memory item, IHelper HELPER) internal view returns (bool) \n    {        \n        \n        require(HELPER.checkAcceptToken(item.acceptToken), \"Unsupported acceptToken\");\n        uint256 minTarget = HELPER.getMinTargetLimit(item.acceptToken);\n        require(minTarget == 0 || item.targetAmount >= minTarget, \"target\");\n        return true;\n    }\n\n    function checkReCreateTask(       \n        mapping(uint256 => TaskItem) storage tasks,\n        mapping(address => mapping(uint256 => UserState)) storage userState,         \n        uint256 taskId,\n        TaskItem memory item, \n        TaskExt memory ext\n        ) \n        internal view {\n\n        TaskItem storage task = tasks[taskId];\n\n        require(task.seller == msg.sender, \"owner\"); // only seller\n\n        bool canReCreate = false;\n\n        // checking state\n\n        if((task.status == TaskStatus.Fail || (task.amountCollected < task.targetAmount && block.timestamp > task.endTime))\n            && (userState[task.seller][taskId].claimed == false)) {\n            // can Claim\n            canReCreate = true;\n        }else if((task.status == TaskStatus.Pending || task.status == TaskStatus.Open) && task.amountCollected == 0) {\n            // can Cancel\n            canReCreate = true;\n        }     \n\n        require(canReCreate, \"state\");\n      \n        // checking inputs\n        require(task.nftContract == item.nftContract, \"nft\");\n        require(keccak256(abi.encodePacked(task.tokenIds)) == keccak256(abi.encodePacked(item.tokenIds)), \"tokenIds\");\n        require(keccak256(abi.encodePacked(task.tokenAmounts)) == keccak256(abi.encodePacked(item.tokenAmounts)), \"tokenAmounts\");\n        require(task.seller == item.seller, \"owner\");\n        require(task.depositId == item.depositId, \"depositId\");\n                \n        checkNewTask(msg.sender, item);\n        checkNewTaskExt(ext);\n    }\n\n    function checkJoinTask(\n        TaskItem storage item,\n        address user, \n        uint32 num, \n        string memory note, \n        IHelper HELPER) internal view returns(bool) {\n\n        require(bytes(note).length <= 256, \"Note len\");\n        require(HELPER.checkPerJoinLimit(num), \"Join limit\");                \n        require(num > 0, \"num\");\n\n        require(item.seller != user, \"Not owner\");\n        require(block.timestamp >= item.startTime && block.timestamp <= item.endTime, \"endTime\");\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \"status\");\n\n        // Calculate number of TOKEN to this contract\n        uint256 amount = item.price.mul(num);\n        require(amount > 0, \"amount\");\n\n\n        return true;\n    }\n\n    function checkExclusive(address account, address token, uint256 amount) internal view returns (bool){\n        if (amount > 0 && token.isContract()) {\n            if (IERC165(token).supportsInterface(0x80ac58cd)) {\n                return IERC721(token).balanceOf(account) >= amount;\n            }\n            return IERC20(token).balanceOf(account) >= amount;\n        }\n\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid] > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && array[low - 1] == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IVRF.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IVRF {\n\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number);    \n\n    /**\n     * Requests randomness from a user-provided max\n     */\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\n\n    /**\n     * Views random result\n     */\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\n}"
    },
    "contracts/interfaces/IAuto.sol": {
      "content": "  // SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nstruct Task {\n    uint256 endTime;\n    uint256 lastTimestamp;\n}\n\ninterface IAuto {\n\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\n\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);    \n    \n    event RevertInvoke(uint256 taskId, string reason);\n\n    function addTask(uint256 taskId, uint endTime) external;\n    function addTasks(uint256[] memory taskIds, uint[] memory endTime) external;\n    function removeTask(uint256 taskId) external;\n    function getQueueTasks() external view returns (uint256[] memory);\n\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "contracts/other/Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// OpenZeppelin contracts\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n//  interfaces\nimport {IExecutor, TaskItem, TaskExt, TaskStatus} from \"../interfaces/IExecutor.sol\";\nimport {IHelper} from \"../interfaces/IHelper.sol\";\nimport {IVRF} from \"../interfaces/IVRF.sol\";\nimport {IAuto} from \"../interfaces/IAuto.sol\";\n\nimport {IProxyNFTStation} from \"../interfaces/IProxyNFTStation.sol\";\n\n/** @title  Helper.\n * @notice It is the contract for protocol settings\n */\ncontract Helper is IHelper, Ownable {\n    using SafeMath for uint256;\n    // ============  interfaces ============\n\n    IExecutor public EXECUTOR;\n    IVRF public VRF;\n\n    IAuto public AUTO_CLOSE;  \n    IAuto public AUTO_DRAW;  \n    \n    IProxyNFTStation public PROXY_PUNKS; \n\n    address public feeRecipient;    // protocol fee recipient\n\n    uint256 public protocolInviteFee;\n    address public inviteFeeRecipient;\n\n    uint32 public MAX_PER_JOIN_NUM = 10000;    // limit user per jointask num (default 10000), to avoid block fail and huge gas fee\n    uint32 public DRAW_DELAY_SEC = 120;    // picker winner need a delay time from task close. (default 120sec)\n    uint256 public protocolFee = 500;     // acceptToken (500 = 5%, 1,000 = 10%)\n\n    mapping(address => bool) public operators;     // protocol income balance (address => bool)\n    mapping(address => bool) public acceptTokens;   // accept payment tokens (Chain Token equals to zero address)     \n    mapping(address => uint256) public minTargetAmount;  // when seller create task, check the min targetAmount limit (token address => min amount)\n\n    constructor(\n        address[] memory _acceptTokens,\n        address _recipient,\n        uint256 _fee,\n        address _inviteRecipient,\n        uint256 _inviteFee,\n        IExecutor  _executor,\n        IVRF _vrf,\n        IAuto _auto_close,\n        IAuto _auto_draw        \n    ) {\n        feeRecipient = _recipient;\n        protocolFee = _fee;\n        inviteFeeRecipient = _inviteRecipient;\n        protocolInviteFee = _inviteFee;\n        EXECUTOR = _executor;\n        VRF = _vrf;        \n        AUTO_CLOSE = _auto_close;\n        AUTO_DRAW = _auto_draw;\n        setAcceptTokens(_acceptTokens, true);\n    }\n\n    modifier onlyOperator() {\n        require(msg.sender == owner() || operators[msg.sender], \"onlyOperator\");\n        _;\n    }\n\n    function getMinTargetLimit(address token) external view override returns (uint256) {\n        return minTargetAmount[token];\n    }\n\n    function checkPerJoinLimit(uint32 num) public view override returns (bool) {\n        return MAX_PER_JOIN_NUM < 1 || num <= MAX_PER_JOIN_NUM;\n    }\n\n    /**\n    @notice check acceptToken support\n    @param acceptToken token address, blockchain token is address(0)\n    @return bool\n    */\n    function checkAcceptToken(address acceptToken)\n        public\n        view\n        override\n        returns (bool)\n    {\n        return acceptTokens[acceptToken];\n    }\n\n    /**\n     * @notice check nft contract, support erc721 & erc1155\n     */\n    function checkNFTContract(address addr) public view override returns (bool) {\n        require(addr != address(0) && Address.isContract(addr), \"nft\");\n        require(            \n            IERC165(addr).supportsInterface(0x80ac58cd) ||  // ERC721 interfaceID\n            IERC165(addr).supportsInterface(0xd9b67a26), // ERC1155 interfaceID\n            \"Invalid contract\"\n        );\n        return true;\n    }\n\n\n    /**\n     * @notice check the new task inputs\n     */\n    function checkNewTask(address user, TaskItem memory item) public view override returns(bool) { \n\n        require(item.seller != address(0) && item.seller == user, \"seller\");          \n        require(item.tokenIds.length > 0, \"tokenIds\");\n        require(block.timestamp < item.endTime, \"endTime\");\n         require(item.endTime - block.timestamp > 84600 && item.endTime - block.timestamp < 2678400, \"duration\"); // at least 23.5 hour, 31 days limit\n        require(item.price > 0 && item.price < item.targetAmount && item.targetAmount.mod(item.price) == 0,\"price or targetAmount\");\n\n        uint num = item.targetAmount.div(item.price);\n        require(num > 0 && num <= 100000 && num.mod(10) == 0, \"num\");\n\n        require(item.amountCollected == 0, \"collect\");    \n       \n        // check nftContract\n        require(checkNFTContract(item.nftContract), \"nft\");\n        (bool checkState, string memory checkMsg) = checkTokenListing(item.nftContract, item.seller, item.tokenIds, item.tokenAmounts);\n        require(checkState, checkMsg);\n\n        return true;\n    }\n\n    function checkNewTaskExt(TaskExt memory ext) public pure override returns(bool) {\n        require(bytes(ext.title).length >=0 && bytes(ext.title).length <= 256, \"title\");\n        require(bytes(ext.note).length <= 256, \"note\");\n        return true;\n    }\n\n    function checkNewTaskRemote(TaskItem memory item) public view override returns (bool) \n    {            \n        require(checkAcceptToken(item.acceptToken), \"Unsupported acceptToken\");\n        uint256 minTarget = minTargetAmount[item.acceptToken];\n        require(minTarget == 0 || item.targetAmount >= minTarget, \"target\");\n        return true;\n    }\n\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) public view override returns(bool) {\n\n        require(bytes(note).length <= 256, \"Note too large\");\n        require(checkPerJoinLimit(num), \"Over join limit\");                \n        require(num > 0, \"num\");\n\n        TaskItem memory item = EXECUTOR.getTask(taskId);\n\n        require(item.seller != user, \"Not allow owner\");\n        require(block.timestamp >= item.startTime && block.timestamp <= item.endTime, \"endTime\");\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \"status\");\n\n        // Calculate number of TOKEN to this contract\n        uint256 amount = item.price.mul(num);\n        require(amount > 0, \"amount\");\n\n        return true;\n    }\n\n    /**\n     * @notice checking seller listing NFTs ownership and balance\n     * @param addr NFT contract address\n     * @param tokenIds tokenId array\n     * @param amounts tokenId amount array (ERC721 can be null)\n     */\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) public view override returns (bool, string memory)\n    {\n       \n        if (IERC165(addr).supportsInterface(0x80ac58cd)) {         // ERC721 interfaceID\n            for (uint256 i = 0; i < tokenIds.length; i++) {\n                if (IERC721(addr).ownerOf(tokenIds[i]) != seller) {\n                    return (false, \"Token listed or not owner\");\n                }               \n            }\n        } else if (IERC165(addr).supportsInterface(0xd9b67a26)) {  // ERC1155 interfaceID\n            require(tokenIds.length == amounts.length, \"Invalid ids len\");\n            for (uint256 i = 0; i < tokenIds.length; i++) {\n                if (!(IERC1155(addr).balanceOf(seller, tokenIds[i]) >= amounts[i] && amounts[i] > 0)) {\n                    return (false, \"amount or balance\");\n                }\n            }\n        }\n        return (true ,\"\");\n    }\n\n    function checkExclusive(address account, address token, uint256 amount) override public view returns (bool){\n        if (amount > 0 && Address.isContract(token)) {\n            if (IERC165(token).supportsInterface(0x80ac58cd)) {\n                return IERC721(token).balanceOf(account) >= amount;\n            }\n            return IERC20(token).balanceOf(account) >= amount;\n        }\n\n        return true;\n    }\n\n    function getProtocolFeeRecipient()\n        external\n        view\n        override\n        returns (address)\n    {\n        return feeRecipient;\n    }\n\n    /**\n    @notice get protocol fee for eache success TaskItem payment, default is 2%\n    @return fee (200 = 25%, 1,000 = 10%)\n    */\n    function getProtocolInviteFee() external view override returns (uint256) {\n        return protocolInviteFee;\n    }\n\n    function getProtocolInviteFeeRecipient()\n        external\n        view\n        override\n        returns (address)\n    {\n        return inviteFeeRecipient;\n    }\n\n    /**\n    @notice get protocol fee for eache success TaskItem payment, default is 2%\n    @return fee (200 = 25%, 1,000 = 10%)\n    */\n    function getProtocolFee() external view override returns (uint256) {\n        return protocolFee;\n    }\n\n    /**\n    @notice get Draw Delay second for security\n     */\n    function getDrawDelay() external view override returns (uint32) {\n        return DRAW_DELAY_SEC;\n    }\n\n    /**\n    @notice get IVRF instance  \n    */\n    function getVRF() public view override returns (IVRF) {\n        return VRF;\n    }\n\n   \n\n    function getAutoClose() external view override returns (IAuto) {\n        return AUTO_CLOSE;\n    }\n\n    function getAutoDraw() external view override returns (IAuto) {\n        return AUTO_DRAW;\n    }\n\n\n    //  ============ onlyOwner  functions  ============\n\n    /**\n    @notice set operator\n     */\n    function setOperator(address addr, bool enable) external onlyOwner {\n        operators[addr] = enable;\n    }\n\n    /**\n    @notice set the ProtocolFeeRecipient\n     */\n    function setProtocolFeeRecipient(address addr) external onlyOwner {\n        feeRecipient = addr;\n    }\n\n    /**\n    @notice set protocol fee for eache success TaskItem payment, default is 5%\n    @param fee fee (500 = 5%, 1,000 = 10%)\n    */\n    function setProtocolInviteFee(uint256 fee) external onlyOwner {\n        protocolInviteFee = fee;\n    }\n\n       /**\n    @notice set the ProtocolFeeRecipient\n     */\n    function setProtocolInviteFeeRecipient(address addr) external onlyOwner {\n        inviteFeeRecipient = addr;\n    }\n\n    /**\n    @notice set protocol fee for eache success TaskItem payment, default is 5%\n    @param fee fee (500 = 5%, 1,000 = 10%)\n    */\n    function setProtocolFee(uint256 fee) external onlyOwner {\n        protocolFee = fee;\n    }\n\n    //  ============ onlyOwner & onlyOperator functions  ============\n\n    /**\n    @notice set the set MAX_PER_JOIN_NUM\n     */\n    function setJoinLimitNum(uint32 num) external onlyOperator {\n        MAX_PER_JOIN_NUM = num;\n    }\n\n    /**\n    @notice set Draw Delay for security\n     */\n    function setDrawDelay(uint32 second) external onlyOperator {\n        DRAW_DELAY_SEC = second;\n    }\n\n    /**\n    @notice set the acceptTokens\n     */\n    function setAcceptTokens(address[] memory tokens, bool enable)\n        public\n        onlyOperator\n    {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            acceptTokens[tokens[i]] = enable;\n        }\n    }\n\n\n    function setMinTargetAmount(address[] memory tokens, uint256[] memory amounts)\n        public\n        onlyOperator\n    {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            minTargetAmount[tokens[i]] = amounts[i];\n        }\n    }\n\n    /**\n    @notice set operator\n     */\n    function setExecutor(IExecutor _executor) external onlyOwner {\n        EXECUTOR = _executor;\n    }\n\n    /**\n    @notice set the VRF\n     */\n    function setVRF(IVRF addr) external onlyOperator {\n        VRF = addr;\n    }\n\n\n\n    function setAuto(IAuto _auto_close, IAuto _auto_draw) external onlyOperator {\n        AUTO_CLOSE = _auto_close;\n        AUTO_DRAW = _auto_draw;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "contracts/ProxyNFTStation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// imports\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\n// interfaces\nimport {IProxyNFTStation, DepositNFT} from \"./interfaces/IProxyNFTStation.sol\";\n\ncontract ProxyNFTStation is IProxyNFTStation, ERC721Holder, ERC1155Holder, Ownable {\n\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _depositIds;\n\n    // ============ Public  ============    \n\n    // interfaceID\n    bytes4 public constant ID_ERC721 = 0x80ac58cd;  // ERC721    \n    bytes4 public constant ID_ERC1155 = 0xd9b67a26; // ERC1155    \n\n    // OpenLuck executors\n    mapping(address => bool) public executors;\n\n    // store user deposited nfts, support multiple executors (executor-address => depositId => NFT)    \n    mapping(address => mapping(uint256 => DepositNFT)) public deposits;\n\n\n    modifier onlyExecutor() {\n        require(executors[msg.sender] == true, \"Lucks: onlyExecutor\");\n        _;\n    }\n\n    // ======== Constructor =========\n\n    /**\n     * @notice Constructor\n     * @param _executor address\n     */\n    constructor(address _executor) {\n       executors[_executor]= true;\n    }\n\n    // ============ Public functions ============\n\n    function getNFT(address executor, uint256 depositId) public view override returns(DepositNFT memory){\n        return deposits[executor][depositId];\n    }\n\n    function deposit(address user, address nft, uint256[] memory tokenIds, uint256[] memory amounts, uint256 endTime) override external payable onlyExecutor \n        returns(uint256 depositId) { \n\n        // transfer nft to this contract\n        _transferNFTs(nft, user, address(this), tokenIds, amounts);    \n\n        // store deposit record\n        _depositIds.increment();\n        depositId = _depositIds.current();\n\n        deposits[msg.sender][depositId] = DepositNFT(user, nft, tokenIds, amounts, endTime);\n        \n        emit Deposit(msg.sender, depositId, user, nft, tokenIds, amounts, endTime);   \n    }\n\n    function withdraw(uint256 depositId, address to) override external onlyExecutor {\n\n        require(deposits[msg.sender][depositId].tokenIds.length > 0, \"Invalid depositId\");\n\n        address nft = deposits[msg.sender][depositId].nftContract;\n        uint256[] memory tokenIds = deposits[msg.sender][depositId].tokenIds;\n        uint256[] memory amounts = deposits[msg.sender][depositId].amounts;\n\n        // update storage\n        delete deposits[msg.sender][depositId];\n\n        // transfer out nft\n        _transferNFTs(nft, address(this), to, tokenIds, amounts);\n\n        emit Withdraw(msg.sender, depositId, to, nft, tokenIds, amounts);   \n    }\n\n\n    // ============ Internal functions ============\n\n    /**\n     * @notice batch transfer NFTs (seller/winner <-> protocol)\n     * @param nft NFT contract address\n     * @param from sender\n     * @param to reciever\n     * @param tokenIds tokenId array\n     * @param amounts amounts array (ERC721 can be null)\n     */\n    function _transferNFTs(address nft, address from, address to, uint256[] memory tokenIds, uint256[] memory amounts) internal\n    {\n        require(nft != from && from != to, \"Invalid address\");\n\n        if (IERC165(nft).supportsInterface(ID_ERC721)) {\n            // transfer ERC721\n            for (uint256 i = 0; i < tokenIds.length; i++) {\n                IERC721(nft).transferFrom(from, to, tokenIds[i]);\n            }\n        } else if (IERC165(nft).supportsInterface(ID_ERC1155)) {\n            // transfer ERC1155\n            require(tokenIds.length == amounts.length, \"Invalid ids & amounts\");\n            IERC1155(nft).safeBatchTransferFrom(from, to, tokenIds, amounts, \"\");\n        } \n        else {\n            revert(\"Unsupport NFT\");\n        }\n    }\n\n    \n    // ============ only Owner ============\n\n    /**\n     * @notice for enmergency case\n     * for user to redeem\n     * in case of cross chain withdraw suck nft, enable to redeem back to seller nft after endTime\n    */\n    function redeem(address executor, uint256 depositId, address to) override external onlyOwner {\n        \n        require(deposits[executor][depositId].tokenIds.length > 0, \"Invalid depositId\");\n        require(block.timestamp > deposits[executor][depositId].endTime, \"Not time to redeem\");\n        require(deposits[executor][depositId].user == to , \"Invalid redeem to\");\n\n        address nft = deposits[executor][depositId].nftContract;\n        uint256[] memory tokenIds = deposits[executor][depositId].tokenIds;\n        uint256[] memory amounts = deposits[executor][depositId].amounts;\n\n        // update storage\n        delete deposits[executor][depositId];\n\n        // transfer back nft to user\n        _transferNFTs(nft, address(this), to, tokenIds, amounts);\n\n        emit Redeem(msg.sender, depositId, to, nft, tokenIds, amounts);   \n    }\n\n\n    //  ============ onlyOwner  functions  ============\n\n    /**\n    @notice set operator\n     */\n    function setExecutor(address executor) external onlyOwner {\n        executors[executor] = true;\n    }\n} "
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/interfaces/IRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Openluck interfaces\nimport {IExecutor, TaskItem, TaskStatus, Ticket} from \"./IExecutor.sol\";\nimport {IHelper} from \"./IHelper.sol\";\n\ninterface IRewards {        \n\n    event RewardCreateTask(address seller, uint256 taskId);\n    event RewardJoinTask(address user, uint256 taskId, address acceptToken, uint256 amount);\n    event RewardTaskSucess(uint256 taskId);\n    event RewardTaskFail(uint256 taskId);   \n\n    function getInviter(address invitee) view external returns (address);\n    function invite(address invitee, address inviter) external;\n\n    function rewardCreateTask(address seller, uint256 taskId) external;\n    function rewardJoinTask(address user, uint256 taskId, address acceptToken, uint256 amount) external;\n    function rewardTaskSucess(uint256 taskId) external;\n    function rewardTaskFail(uint256 taskId) external;   \n\n}"
    },
    "contracts/other/AutoTask.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// OpenZeppelin contracts\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\n//  interfaces\nimport {IExecutor, TaskItem} from \"../interfaces/IExecutor.sol\";\nimport {IAuto,Task} from \"../interfaces/IAuto.sol\";\nimport \"../libraries/SortedLinkMap.sol\";\n\nabstract contract AutoTask is IAuto, Ownable, Pausable {\n\n    using SortedLinkMap for SortedLinkMap.SortedMap;    \n\n    SortedLinkMap.SortedMap internal taskList;\n    \n    uint256 public BATCH_PERFORM_LIMIT = 5; // perform limist, default 5\n    uint256 public DST_GAS_AMOUNT = 0; // layer zero dstGasAmount\n\n    address public KEEPER; // chainLink keeper Registry Address\n    IExecutor public EXECUTOR;    \n\n    /**\n    * @param _keeperRegAddr The address of the keeper registry contract\n    * @param _executor The LucksExecutor contract\n    */\n    constructor(address _keeperRegAddr, IExecutor _executor) {        \n        KEEPER = _keeperRegAddr;\n        EXECUTOR = _executor;\n    }\n\n\n    modifier onlyKeeper() {\n        require(msg.sender == KEEPER || msg.sender == owner(), \"onlyKeeperRegistry\");\n        _;\n    }\n\n    modifier onlyExecutor() {\n        require(msg.sender == address(EXECUTOR) || msg.sender == owner(), \"onlyExecutor\");\n        _;\n    }\n\n    /**\n    * @notice Receive funds\n    */\n    receive() external payable {\n        emit FundsAdded(msg.value, address(this).balance, msg.sender);\n    }\n\n    //  ============ Public  functions  ============\n\n    function size() external view returns(uint256) {\n        return taskList.count;\n    }\n\n    function first() external view returns(uint256) {\n        return taskList.first();\n    }\n\n    function last() external view returns(uint256) {\n        return taskList.last();\n    }\n\n    function prev(uint256 taskId) external view returns(uint256) {\n        return taskList.prev(taskId);\n    }   \n\n    function next(uint256 taskId) external view returns(uint256) {\n        return taskList.next(taskId);\n    }    \n\n    function get(uint256 taskId) external view returns(uint256) {\n        return taskList.nodes[taskId].value;\n    }\n\n    function top(uint256 num) external view returns(uint256[] memory) {\n        return taskList.top(num);\n    }\n\n    function addTask(uint256 taskId, uint endTime) external override onlyExecutor {    \n        if (taskId > 0 && endTime > 0) {            \n            taskList.add(taskId, endTime);\n        }\n    }\n\n    function addTasks(uint256[] memory taskIds, uint[] memory endTimes) external override onlyExecutor {    \n        require(taskIds.length > 0 && taskIds.length == endTimes.length, \"Invalid len\");\n        for(uint i=0; i < taskIds.length; i++) {\n            if (taskIds[i] > 0 && endTimes[i] > 0) {            \n                taskList.add(taskIds[i], endTimes[i]);\n            }\n        }\n    }\n\n    function removeTask(uint256 taskId) external override onlyExecutor {        \n        _removeTask(taskId);\n    }\n\n    function getQueueTasks() public override view virtual returns (uint256[] memory) {\n        \n        uint256[] memory ids = new uint256[](BATCH_PERFORM_LIMIT);\n\n        uint256 count = 0;\n        uint taskId = taskList.first();\n       \n        while (taskId > 0 && count < BATCH_PERFORM_LIMIT) {\n                  \n            if (taskList.nodes[taskId].value <= block.timestamp) {                \n                ids[count] = taskId;    \n                count++;                   \n            }else {\n                break;\n            }\n            taskId = taskList.next(taskId);           \n        }\n       \n        if (count != BATCH_PERFORM_LIMIT) {\n            assembly {\n                mstore(ids, count)\n            }\n        }\n        return ids;   \n    }\n\n    //  ============ internal  functions  ============\n\n    function _removeTask(uint256 taskId) internal {                \n        taskList.remove(taskId);\n    }\n\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return '';\n\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n\n    function invokeTasks(uint256[] memory _taskIds) internal virtual {       \n    }\n\n    //  ============ onlyOwner  functions  ============\n    \n    /**\n    * @notice Pauses the contrac t, which prevents executing performUpkeep\n    */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n    * @notice Unpauses the contract\n    */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n    * @notice Withdraws the contract balance\n    * @param amount The amount of eth (in wei) to withdraw\n    * @param payee The address to pay\n    */\n    function withdraw(uint256 amount, address payable payee) external onlyOwner {\n        require(payee != address(0));\n        emit FundsWithdrawn(amount, payee);\n        payee.transfer(amount);\n    }\n\n    /**\n    * @notice Sets the keeper registry address\n    */\n    function setKeeper(address _keeperRegAddr) public onlyOwner {\n        require(_keeperRegAddr != address(0));\n        emit KeeperRegistryAddressUpdated(KEEPER, _keeperRegAddr);\n        KEEPER = _keeperRegAddr;\n    }\n\n\n    function setBatchPerformLimist(uint256 num) public onlyOwner {      \n        require(num > 0, \"Invalid limit num\");\n        BATCH_PERFORM_LIMIT = num;\n    }\n\n    function setDstGasAmount(uint256 amount) public onlyOwner {      \n        DST_GAS_AMOUNT = amount;\n    }\n\n    /**\n    @notice set operator\n     */\n    function setExecutor(IExecutor _executor) external onlyOwner {\n        EXECUTOR = _executor;\n    }\n}\n\n"
    },
    "contracts/libraries/SortedLinkMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\nlibrary SortedLinkMap {\n\n    struct Item {        \n        uint id;\n        uint value;\n        uint leftId;\n    }\n\n    uint constant None = uint(0);\n\n    struct SortedMap {\n        uint count;\n        uint maxId;\n        mapping(uint => uint) keys; // id => id , linked list\n        mapping(uint => Item) nodes; // id => value item\n    }\n    \n    function add(SortedMap storage self, uint id, uint value) internal {                \n\n        require(id > 0, \"require id > 0\");\n        \n        if (self.nodes[id].value > 0){\n            // not allow duplicate key\n            return;\n        }\n\n        uint leftId = findPrevByValue(self, value);\n        uint rightId = next(self, leftId);\n\n        // update prev item link\n        self.keys[leftId] = id;\n\n        // update current item\n        self.keys[id] = rightId;        \n        self.nodes[id] = Item(id, value, leftId);   \n\n        // update max item\n        if (rightId == None) {\n            self.maxId = id;\n        }        \n        else {\n            // upate next item link\n            self.nodes[rightId].leftId = id;   \n        }\n\n        // update counts\n        self.count ++;                    \n    }\n\n    function remove(SortedMap storage self, uint id) internal {\n\n        if (exists(self, id)) {\n\n            // get left and right\n            uint leftId = prev(self, id);\n            uint rightId = next(self, id);\n\n            self.keys[leftId] = rightId;\n\n            if (rightId > 0) {\n                self.nodes[rightId].leftId = leftId;\n            }\n\n            // update max item\n            if (rightId == None) {\n                self.maxId = leftId;\n            }   \n\n            delete self.nodes[id]; // remove value\n            delete self.keys[id]; // remove key\n\n            self.count --;\n        }\n    }\n\n    function exists(SortedMap storage self, uint id) internal view returns(bool) {\n        require(id > 0);\n        return self.nodes[id].value > 0;\n    }\n\n    function first(SortedMap storage self) internal view returns(uint) {\n        return next(self, 0);\n    }\n       \n    function last(SortedMap storage self) internal view returns(uint) {\n        return self.maxId;\n    }\n\n    function size(SortedMap storage self) internal view returns(uint) {\n        return self.count;\n    }\n\n    function findPrevByValue(SortedMap storage self, uint target) internal view returns(uint256) {  \n\n        require(target > 0, \"require target > 0\");\n\n        if (self.count == 0) return None;\n        \n        // try to match last item\n        uint lastId = self.maxId;        \n        uint lastValue = self.nodes[lastId].value;\n        if (target >= lastValue) {            \n            return lastId; // return max\n        }\n\n        // try to match first item\n        uint firstId = first(self);\n        uint firsValue = self.nodes[firstId].value;\n        if (target <= firsValue) {\n            return None;  // return head\n        }\n\n        uint mid = (firsValue + lastValue) >> 1;\n\n        if (target >= mid) {\n            // find prev item step by step (right to left)\n            uint curentId = lastId;\n            while (curentId > 0) {\n                curentId = prev(self, curentId);\n                if (curentId > 0 && target >= self.nodes[curentId].value) {\n                    return curentId;\n                }        \n            }\n        }\n        else {\n            // find next item step by step (left to right)\n            uint curentId = firstId;\n            while (curentId > 0) { // the lastId node is zero\n                curentId = next(self, curentId);\n                if (curentId > 0 && target >= self.nodes[curentId].value) {\n                    return curentId;\n                }        \n            }\n        }\n\n        return None;\n    }\n\n    function prev(SortedMap storage self, uint id) internal view returns(uint256) {\n        if (exists(self, id)) {\n            return self.nodes[id].leftId;\n        }  \n        return None;     \n    }\n\n    function next(SortedMap storage self, uint id) internal view returns(uint256) {\n        uint nextId = self.keys[id];\n        return nextId;\n    }  \n\n    function get(SortedMap storage self, uint id) internal view returns(Item memory) {\n        return self.nodes[id];\n    }  \n\n    function top(SortedMap storage self, uint num) internal view returns(uint[] memory){        \n        if(num > self.count) {\n            num = self.count;\n        }\n        if (num < 1) {\n            return new uint[](0);\n        }\n\n        uint[] memory items = new uint[](num);\n\n        uint curentId = first(self);\n        for(uint i=0; i < num; i++) {            \n            if (curentId > 0) {\n                items[i] = curentId;\n            }   \n            curentId = next(self, curentId);\n        }\n        \n        return items;\n    }\n}"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/other/VRF.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// OpenZeppelin contracts\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// Chainlink contracts\nimport \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n\n// Openluck interfaces\nimport {IVRF} from \"../interfaces/IVRF.sol\";\n\n\n/** @title Openluck VRF\n * @notice It is the contract for Randomness Number Generation\n */\ncontract VRF is VRFConsumerBaseV2, IVRF, Ownable {\n    VRFCoordinatorV2Interface COORDINATOR;\n    LinkTokenInterface LINKTOKEN;\n\n    // Your subscription ID.\n    uint64 s_subscriptionId;\n\n    // Rinkeby coordinator. For other networks,\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\n    address public vrfCoordinator;\n\n    // Rinkeby LINK token contract. For other networks,\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\n    address public link;\n\n    // The gas lane to use, which specifies the maximum gas price to bump to.\n    // For a list of available gas lanes on each network,\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\n    bytes32 public keyHash;\n\n    // Depends on the number of requested values that you want sent to the\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\n    // so 100,000 is a safe default for this example contract. Test and adjust\n    // this limit based on the network that you select, the size of the request,\n    // and the processing of the callback request in the fulfillRandomWords()\n    // function.\n    uint32 public callbackGasLimit = 100000;\n\n    // The default is 3, but you can set this higher.\n    uint16 requestConfirmations = 3;\n\n    address public EXECUTOR;\n\n    mapping(uint256 => uint32) public randomResults;      // taskId => ticket FinalNumber\n    mapping(uint256 => uint256) public requestToTaskId;    // requestId => taskId\n    mapping(uint256 => uint256) public requestToMaxNum;    // requestId => max num\n    mapping(uint256 => uint256) public taskToRequestId;    // taskId => requestId\n\n    constructor(\n        uint64 _subscriptionId,\n        address _vrfCoordinator,\n        address _link,\n        bytes32 _keyHash,\n        address _executor\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\n\n        require(_subscriptionId > 0, \"Invalid subscriptionId\");\n\n        s_subscriptionId = _subscriptionId;\n        vrfCoordinator = _vrfCoordinator;\n        link = _link;\n        keyHash = _keyHash;\n\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n        LINKTOKEN = LinkTokenInterface(link);\n        EXECUTOR = _executor;\n    }\n\n    /**\n     * @notice Request randomness from a user-provided max\n     * @param max: max provided by the LucksExecutor (lastTicketId)\n     */\n    function reqRandomNumber(uint256 taskId, uint256 max) external override {\n        require(msg.sender == EXECUTOR, \"Only Lucks can reqRandomNumber\");\n        require(max > 0, \"Invalid max input\");\n        \n        if (taskToRequestId[taskId] > 0) {\n            return;\n        }\n        \n        // Will revert if subscription is not set and funded.\n        uint256 requestId = COORDINATOR.requestRandomWords(\n            keyHash,\n            s_subscriptionId,\n            requestConfirmations,\n            callbackGasLimit,\n            1\n        );\n        requestToTaskId[requestId] = taskId;\n        requestToMaxNum[requestId] = max;\n        taskToRequestId[taskId] = requestId;\n\n        emit ReqRandomNumber(taskId, max, requestId);\n    }\n\n    /**\n     * @notice View random result\n     */\n    function viewRandomResult(uint256 taskId)\n        external\n        view\n        override\n        returns (uint32)\n    {\n        return randomResults[taskId];\n    }\n\n    /**\n     * @notice Callback function used by ChainLink's VRF Coordinator\n     */\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\n        internal\n        override\n    {\n        uint256 taskId = requestToTaskId[requestId];        \n        require(taskId > 0, \"Wrong taskId or requestId\");\n\n        // Between 1 and max:\n        randomResults[taskId] = uint32((randomWords[0] % requestToMaxNum[requestId]) + 1);\n\n        emit RspRandomNumber(\n            taskId,\n            requestId,\n            randomWords[0],\n            randomResults[taskId]\n        );\n    }\n\n    // ============ only Owner ============\n\n    /**\n     * @notice Callback for enmergency case\n     */\n    function callbackRandomWords(uint256 taskId, uint256 seed)\n        external\n        onlyOwner\n    {    \n        uint256 requestId = taskToRequestId[taskId];\n\n        // generate random by owner\n        uint256 random = uint256(\n           keccak256(abi.encodePacked(\n                seed *\n                block.timestamp *\n                block.difficulty *\n                block.number *\n                uint(blockhash(block.number - requestConfirmations))\n            ))\n        );\n        \n        // Between 1 and max:\n        randomResults[taskId] = uint32((random % requestToMaxNum[requestId]) + 1);\n\n        emit RspRandomNumber(\n            taskId,\n            requestToTaskId[taskId],\n            random,\n            randomResults[taskId]\n        );\n    }\n\n    /**\n     * @notice Change the keyHash\n     * @param _keyHash: new keyHash\n     */\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\n        keyHash = _keyHash;\n    }\n\n    /**\n     * @notice Change the requestConfirmations\n     * @param num: num\n     */\n    function setReqConfirmations(uint16 num) external onlyOwner {\n        requestConfirmations = num;\n    }\n\n    /**\n     * @notice Set the address for the Lucks\n     * @param _executor: address of the PancakeSwap crowdluck\n     */\n    function setExecutor(address _executor) external onlyOwner {\n        EXECUTOR = _executor;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "contracts/ProxyTokenStation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// imports\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n// interfaces\nimport {IProxyTokenStation} from \"./interfaces/IProxyTokenStation.sol\";\nimport {IWETH} from \"./interfaces/IWETH.sol\";\n\ncontract ProxyTokenStation is IProxyTokenStation, Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // ============ Public  ============    \n\n    uint public GAS_LIMIT = 100000;\n   \n    // OpenLuck executors\n    mapping(address => bool) public executors;\n\n    // support multiple executors (executor-address => token address => amount)    \n    mapping(address => mapping(address => uint256)) public deposits;\n\n    address public WETH;\n   \n    modifier onlyExecutor() {\n        require(executors[msg.sender] == true, \"Lucks: onlyExecutor\");\n        _;\n    }\n\n    // ======== Constructor =========\n\n    /**\n     * @notice Constructor\n     * @param _executor executor address\n     */\n    constructor(address _executor, address _weth) {\n        executors[_executor] = true;\n        WETH = _weth;\n    }\n\n    // ============ external functions ============\n\n    function deposit(address user, address token, uint256 amount) override external payable onlyExecutor {\n        \n        _deposit(msg.sender, user, token, amount);\n        \n        emit Deposit(msg.sender, user, token, amount);        \n    }\n\n    function withdraw(address user, address token, uint256 amount) override external onlyExecutor {\n\n        _withdraw(msg.sender, user, token, amount);\n\n        emit Withdraw(msg.sender, user, token, amount);   \n    }\n\n    // ============ Internal functions ============\n\n    function _deposit(address executor, address user, address token, uint256 amount) internal {\n        //zero address means Chain Navite Token, support ETH+WETH\n         if (token == address(0)) { \n            // allow ETH+WETH\n            uint256 wrapTokenAmount = amount.sub(msg.value);\n            require(wrapTokenAmount >= 0, \"deposit: Msg.value too high\");\n            if (wrapTokenAmount > 0) {\n                require(address(WETH) != address(0), \"wrapp token not set or msg.value too small\");\n                require(IERC20(WETH).balanceOf(user) >= wrapTokenAmount, \"Insufficient balance\");\n                require(IERC20(WETH).allowance(user, address(this)) >= wrapTokenAmount, \"Insufficient allowance\");       \n                // Transfer WETH to this contract\n                IERC20(WETH).transferFrom(user, address(this), wrapTokenAmount);\n                // transfer WETH to ETH\n                IWETH(WETH).withdraw(wrapTokenAmount);\n\n            }\n            \n        } else {\n            require(IERC20(token).balanceOf(user) >= amount, \"Insufficient token balance\");\n            require(IERC20(token).allowance(user, address(this)) >= amount, \"Insufficient token allowance\");\n            // Transfer tokens to this contract\n            IERC20(token).transferFrom(user, address(this), amount);\n        }\n\n        // update deposits balance\n        deposits[executor][token] = deposits[executor][token].add(amount);\n    }\n\n    function _withdraw(address executor, address user, address token, uint256 amount) internal {\n        \n        require(user != address(0) && user != address(this), \"Invalid address\");\n        require(amount > 0, \"amount\");\n        require(deposits[executor][token] >= amount, \"Insufficient deposited balance for this executor\");\n\n        // update deposits balance\n        deposits[executor][token] = deposits[executor][token].sub(amount);\n\n        // transfer\n        if (token == address(0)) {    \n            require(address(this).balance >= amount, \"Lack of funds\");  \n\n            // transfer funds \n            if (Address.isContract(user)) {\n                (bool state,) = address(user).call{ value: amount, gas: GAS_LIMIT}(\"\");\n                require(state, \"send value failed\");                \n            }\n            else {\n                payable(user).transfer(amount);  \n            }                  \n\n        } else {        \n            require(IERC20(token).balanceOf(address(this)) >= amount, \"Lack of token\");\n            // Transfer tokens                \n            IERC20(token).transfer(user, amount);\n        }\n    }\n\n    /**\n    @notice set operator\n     */\n    function setExecutor(address executor) external onlyOwner {\n        executors[executor] = true;\n    }\n\n\n    /**\n    @notice set IWETH\n     */\n    function setWETH(address _eth) external onlyOwner {\n        WETH = _eth;\n    }\n\n    function setGasLimit(uint amount) external onlyOwner {\n        GAS_LIMIT = amount;\n    }\n} "
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GNU\npragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function withdraw(uint256 wad) external;\n}"
    },
    "contracts/other/AutoDrawTask.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Chainlink contracts\nimport \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n// interfaces\n\nimport \"./AutoTask.sol\";\n\ncontract AutoDrawTask is AutoTask, KeeperCompatibleInterface {\n    using SafeMath for uint256;\n\n    // add a little more quote fee 0.000001\n    uint256 public QUOTE_FEE_ADD = 1000000000000;\n\n    /***\n     * @param _keeperRegAddr The address of the keeper registry contract\n     * @param _executor The LucksExecutor contract\n     * @param _bridge The LucksBridge contract\n     */\n    constructor(address _keeperRegAddr, IExecutor _executor)\n        AutoTask(_keeperRegAddr, _executor)\n    {\n        DST_GAS_AMOUNT = 550000;\n    }\n\n    //  ============ internal  functions  ============\n\n    function invokeTasks(uint256[] memory _taskIds) internal override {\n        for (uint256 i = 0; i < _taskIds.length; i++) {\n            uint256 taskId = _taskIds[i];\n            _removeTask(taskId);\n            try EXECUTOR.pickWinner(taskId) {} catch (\n                bytes memory reason\n            ) {\n                emit RevertInvoke(taskId, _getRevertMsg(reason));\n            }\n        }\n    }\n\n    //  ============ Keeper  functions  ============\n\n    function checkUpkeep(\n        bytes calldata /* checkData */\n    )\n        external\n        view\n        override\n        whenNotPaused\n        returns (bool upkeepNeeded, bytes memory performData)\n    {\n        uint256[] memory ids = getQueueTasks();\n        upkeepNeeded = ids.length > 0;\n        performData = abi.encode(ids);\n        return (upkeepNeeded, performData);\n    }\n\n    function performUpkeep(bytes calldata performData)\n        external\n        override\n        whenNotPaused\n        onlyKeeper\n    {\n        uint256[] memory ids = abi.decode(performData, (uint256[]));\n        invokeTasks(ids);\n    }\n\n    //  ============ onlyOwner  functions  ============\n\n    function setQuoteFeeAdd(uint256 amount) external onlyOwner {\n        QUOTE_FEE_ADD = amount;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./KeeperBase.sol\";\nimport \"./interfaces/KeeperCompatibleInterface.sol\";\n\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract KeeperBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/other/AutoCloseTask.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Chainlink contracts\nimport \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\n\n// interfaces\nimport \"./AutoTask.sol\";\n\ncontract AutoCloseTask is AutoTask, KeeperCompatibleInterface {\n\n    /**\n    * @param _keeperRegAddr The address of the keeper registry contract\n    * @param _executor The LucksExecutor contract\n    */\n    constructor(address _keeperRegAddr, IExecutor _executor) AutoTask(_keeperRegAddr,_executor){        \n    }\n\n\n    //  ============ internal  functions  ============\n\n    function invokeTasks(uint256[] memory _taskIds) internal override {\n\n      \n\n         for (uint256 i = 0; i < _taskIds.length; i++) {\n\n            uint256 taskId = _taskIds[i];\n            _removeTask(taskId);\n\n            try EXECUTOR.closeTask(taskId) {\n         \n            } catch(bytes memory reason) {\n                emit RevertInvoke(taskId, _getRevertMsg(reason));\n            }            \n        }\n    }\n\n    //  ============ Keeper  functions  ============\n\n    function checkUpkeep(bytes calldata /* checkData */) external view override whenNotPaused returns (bool upkeepNeeded, bytes memory performData) {\n        uint256[] memory ids = getQueueTasks();\n        upkeepNeeded = ids.length > 0;\n        performData = abi.encode(ids);\n        return (upkeepNeeded, performData);\n    }\n\n    function performUpkeep(bytes calldata performData) external override whenNotPaused onlyKeeper {\n        uint256[] memory ids = abi.decode(performData, (uint256[]));\n        invokeTasks(ids);\n    }\n}\n\n"
    },
    "contracts/libraries/RedBlackTreeLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\nlibrary RedBlackTreeLibrary {\n\n    struct Node {\n        uint parent;\n        uint left;\n        uint right;\n        bool red;\n    }\n\n    struct Tree {\n        uint root;\n        mapping(uint => Node) nodes;\n    }\n\n    uint private constant EMPTY = 0;\n\n    function first(Tree storage self) internal view returns (uint _key) {\n        _key = self.root;\n        if (_key != EMPTY) {\n            while (self.nodes[_key].left != EMPTY) {\n                _key = self.nodes[_key].left;\n            }\n        }\n    }\n    function last(Tree storage self) internal view returns (uint _key) {\n        _key = self.root;\n        if (_key != EMPTY) {            \n            while (self.nodes[_key].right != EMPTY) {\n                _key = self.nodes[_key].right;\n            }\n        }\n    }\n\n    function next(Tree storage self, uint target) internal view returns (uint cursor) {\n        require(target != EMPTY);\n        if (self.nodes[target].right != EMPTY) {\n            cursor = treeMinimum(self, self.nodes[target].right);\n        } else {\n            cursor = self.nodes[target].parent;\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\n                target = cursor;\n                cursor = self.nodes[cursor].parent;\n            }\n        }\n    }\n\n    function greaterThan(Tree storage self, uint value) internal view returns (uint cursor) {\n        uint node = self.root;\n        if (node != EMPTY) {\n            if (value < node){\n                cursor = node;\n                node = prev(self, node);              \n                while(cursor != EMPTY && node > value) {\n                    cursor = node;\n                    node = prev(self, node);\n                }\n            }\n            else {\n                node = next(self, node);\n                cursor = node;\n                while(cursor != EMPTY && node < value) {            \n                    node = next(self, node);\n                    cursor = node;\n                }\n            }\n        }\n    }\n\n    function prev(Tree storage self, uint target) internal view returns (uint cursor) {\n        require(target != EMPTY);\n        if (self.nodes[target].left != EMPTY) {\n            cursor = treeMaximum(self, self.nodes[target].left);\n        } else {\n            cursor = self.nodes[target].parent;\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\n                target = cursor;\n                cursor = self.nodes[cursor].parent;\n            }\n        }\n    }\n\n\n    function exists(Tree storage self, uint key) internal view returns (bool) {\n        return (key != EMPTY) && ((key == self.root) || (self.nodes[key].parent != EMPTY));\n    }\n    function isEmpty(uint key) internal pure returns (bool) {\n        return key == EMPTY;\n    }\n    function getEmpty() internal pure returns (uint) {\n        return EMPTY;\n    }\n    function getNode(Tree storage self, uint key) internal view returns (uint _returnKey, uint _parent, uint _left, uint _right, bool _red) {\n        require(exists(self, key));\n        return(key, self.nodes[key].parent, self.nodes[key].left, self.nodes[key].right, self.nodes[key].red);\n    }\n\n    function insert(Tree storage self, uint key) internal {\n        require(key != EMPTY);\n        require(!exists(self, key));\n        uint cursor = EMPTY;\n        uint probe = self.root;\n        while (probe != EMPTY) {\n            cursor = probe;\n            if (key < probe) {\n                probe = self.nodes[probe].left;\n            } else {\n                probe = self.nodes[probe].right;\n            }\n        }\n        self.nodes[key] = Node({parent: cursor, left: EMPTY, right: EMPTY, red: true});\n        if (cursor == EMPTY) {\n            self.root = key;\n        } else if (key < cursor) {\n            self.nodes[cursor].left = key;\n        } else {\n            self.nodes[cursor].right = key;\n        }\n        insertFixup(self, key);\n    }\n    function remove(Tree storage self, uint key) internal {\n        require(key != EMPTY);\n        require(exists(self, key));\n        uint probe;\n        uint cursor;\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\n            cursor = key;\n        } else {\n            cursor = self.nodes[key].right;\n            while (self.nodes[cursor].left != EMPTY) {\n                cursor = self.nodes[cursor].left;\n            }\n        }\n        if (self.nodes[cursor].left != EMPTY) {\n            probe = self.nodes[cursor].left;\n        } else {\n            probe = self.nodes[cursor].right;\n        }\n        uint yParent = self.nodes[cursor].parent;\n        self.nodes[probe].parent = yParent;\n        if (yParent != EMPTY) {\n            if (cursor == self.nodes[yParent].left) {\n                self.nodes[yParent].left = probe;\n            } else {\n                self.nodes[yParent].right = probe;\n            }\n        } else {\n            self.root = probe;\n        }\n        bool doFixup = !self.nodes[cursor].red;\n        if (cursor != key) {\n            replaceParent(self, cursor, key);\n            self.nodes[cursor].left = self.nodes[key].left;\n            self.nodes[self.nodes[cursor].left].parent = cursor;\n            self.nodes[cursor].right = self.nodes[key].right;\n            self.nodes[self.nodes[cursor].right].parent = cursor;\n            self.nodes[cursor].red = self.nodes[key].red;\n            (cursor, key) = (key, cursor);\n        }\n        if (doFixup) {\n            removeFixup(self, probe);\n        }\n        delete self.nodes[cursor];\n    }\n\n    function treeMinimum(Tree storage self, uint key) private view returns (uint) {\n        while (self.nodes[key].left != EMPTY) {\n            key = self.nodes[key].left;\n        }\n        return key;\n    }\n    function treeMaximum(Tree storage self, uint key) private view returns (uint) {\n        while (self.nodes[key].right != EMPTY) {\n            key = self.nodes[key].right;\n        }\n        return key;\n    }\n\n    function rotateLeft(Tree storage self, uint key) private {\n        uint cursor = self.nodes[key].right;\n        uint keyParent = self.nodes[key].parent;\n        uint cursorLeft = self.nodes[cursor].left;\n        self.nodes[key].right = cursorLeft;\n        if (cursorLeft != EMPTY) {\n            self.nodes[cursorLeft].parent = key;\n        }\n        self.nodes[cursor].parent = keyParent;\n        if (keyParent == EMPTY) {\n            self.root = cursor;\n        } else if (key == self.nodes[keyParent].left) {\n            self.nodes[keyParent].left = cursor;\n        } else {\n            self.nodes[keyParent].right = cursor;\n        }\n        self.nodes[cursor].left = key;\n        self.nodes[key].parent = cursor;\n    }\n    function rotateRight(Tree storage self, uint key) private {\n        uint cursor = self.nodes[key].left;\n        uint keyParent = self.nodes[key].parent;\n        uint cursorRight = self.nodes[cursor].right;\n        self.nodes[key].left = cursorRight;\n        if (cursorRight != EMPTY) {\n            self.nodes[cursorRight].parent = key;\n        }\n        self.nodes[cursor].parent = keyParent;\n        if (keyParent == EMPTY) {\n            self.root = cursor;\n        } else if (key == self.nodes[keyParent].right) {\n            self.nodes[keyParent].right = cursor;\n        } else {\n            self.nodes[keyParent].left = cursor;\n        }\n        self.nodes[cursor].right = key;\n        self.nodes[key].parent = cursor;\n    }\n\n    function insertFixup(Tree storage self, uint key) private {\n        uint cursor;\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\n            uint keyParent = self.nodes[key].parent;\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\n                if (self.nodes[cursor].red) {\n                    self.nodes[keyParent].red = false;\n                    self.nodes[cursor].red = false;\n                    self.nodes[self.nodes[keyParent].parent].red = true;\n                    key = self.nodes[keyParent].parent;\n                } else {\n                    if (key == self.nodes[keyParent].right) {\n                      key = keyParent;\n                      rotateLeft(self, key);\n                    }\n                    keyParent = self.nodes[key].parent;\n                    self.nodes[keyParent].red = false;\n                    self.nodes[self.nodes[keyParent].parent].red = true;\n                    rotateRight(self, self.nodes[keyParent].parent);\n                }\n            } else {\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\n                if (self.nodes[cursor].red) {\n                    self.nodes[keyParent].red = false;\n                    self.nodes[cursor].red = false;\n                    self.nodes[self.nodes[keyParent].parent].red = true;\n                    key = self.nodes[keyParent].parent;\n                } else {\n                    if (key == self.nodes[keyParent].left) {\n                      key = keyParent;\n                      rotateRight(self, key);\n                    }\n                    keyParent = self.nodes[key].parent;\n                    self.nodes[keyParent].red = false;\n                    self.nodes[self.nodes[keyParent].parent].red = true;\n                    rotateLeft(self, self.nodes[keyParent].parent);\n                }\n            }\n        }\n        self.nodes[self.root].red = false;\n    }\n\n    function replaceParent(Tree storage self, uint a, uint b) private {\n        uint bParent = self.nodes[b].parent;\n        self.nodes[a].parent = bParent;\n        if (bParent == EMPTY) {\n            self.root = a;\n        } else {\n            if (b == self.nodes[bParent].left) {\n                self.nodes[bParent].left = a;\n            } else {\n                self.nodes[bParent].right = a;\n            }\n        }\n    }\n    \n    function removeFixup(Tree storage self, uint key) private {\n        uint cursor;\n        while (key != self.root && !self.nodes[key].red) {\n            uint keyParent = self.nodes[key].parent;\n            if (key == self.nodes[keyParent].left) {\n                cursor = self.nodes[keyParent].right;\n                if (self.nodes[cursor].red) {\n                    self.nodes[cursor].red = false;\n                    self.nodes[keyParent].red = true;\n                    rotateLeft(self, keyParent);\n                    cursor = self.nodes[keyParent].right;\n                }\n                if (!self.nodes[self.nodes[cursor].left].red && !self.nodes[self.nodes[cursor].right].red) {\n                    self.nodes[cursor].red = true;\n                    key = keyParent;\n                } else {\n                    if (!self.nodes[self.nodes[cursor].right].red) {\n                        self.nodes[self.nodes[cursor].left].red = false;\n                        self.nodes[cursor].red = true;\n                        rotateRight(self, cursor);\n                        cursor = self.nodes[keyParent].right;\n                    }\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\n                    self.nodes[keyParent].red = false;\n                    self.nodes[self.nodes[cursor].right].red = false;\n                    rotateLeft(self, keyParent);\n                    key = self.root;\n                }\n            } else {\n                cursor = self.nodes[keyParent].left;\n                if (self.nodes[cursor].red) {\n                    self.nodes[cursor].red = false;\n                    self.nodes[keyParent].red = true;\n                    rotateRight(self, keyParent);\n                    cursor = self.nodes[keyParent].left;\n                }\n                if (!self.nodes[self.nodes[cursor].right].red && !self.nodes[self.nodes[cursor].left].red) {\n                    self.nodes[cursor].red = true;\n                    key = keyParent;\n                } else {\n                    if (!self.nodes[self.nodes[cursor].left].red) {\n                        self.nodes[self.nodes[cursor].right].red = false;\n                        self.nodes[cursor].red = true;\n                        rotateLeft(self, cursor);\n                        cursor = self.nodes[keyParent].left;\n                    }\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\n                    self.nodes[keyParent].red = false;\n                    self.nodes[self.nodes[cursor].left].red = false;\n                    rotateRight(self, keyParent);\n                    key = self.root;\n                }\n            }\n        }\n        self.nodes[key].red = false;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}