{
  "address": "0x303E0BF6a156e3371B5D565cfd4593aD044925Ea",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_acceptTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_inviteRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inviteFee",
          "type": "uint256"
        },
        {
          "internalType": "contract IExecutor",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "contract IVRF",
          "name": "_vrf",
          "type": "address"
        },
        {
          "internalType": "contract IAuto",
          "name": "_auto_close",
          "type": "address"
        },
        {
          "internalType": "contract IAuto",
          "name": "_auto_draw",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUTO_CLOSE",
      "outputs": [
        {
          "internalType": "contract IAuto",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUTO_DRAW",
      "outputs": [
        {
          "internalType": "contract IAuto",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DRAW_DELAY_SEC",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXECUTOR",
      "outputs": [
        {
          "internalType": "contract IExecutor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PER_JOIN_NUM",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_PUNKS",
      "outputs": [
        {
          "internalType": "contract IProxyNFTStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VRF",
      "outputs": [
        {
          "internalType": "contract IVRF",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "acceptTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "acceptToken",
          "type": "address"
        }
      ],
      "name": "checkAcceptToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "checkExclusive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "num",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "checkJoinTask",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "checkNFTContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "acceptToken",
              "type": "address"
            },
            {
              "internalType": "enum TaskStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "copyId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TaskItem",
          "name": "item",
          "type": "tuple"
        }
      ],
      "name": "checkNewTask",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "note",
              "type": "string"
            }
          ],
          "internalType": "struct TaskExt",
          "name": "ext",
          "type": "tuple"
        }
      ],
      "name": "checkNewTaskExt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "acceptToken",
              "type": "address"
            },
            {
              "internalType": "enum TaskStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "copyId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TaskItem",
          "name": "item",
          "type": "tuple"
        }
      ],
      "name": "checkNewTaskRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "num",
          "type": "uint32"
        }
      ],
      "name": "checkPerJoinLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "checkTokenListing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAutoClose",
      "outputs": [
        {
          "internalType": "contract IAuto",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAutoDraw",
      "outputs": [
        {
          "internalType": "contract IAuto",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDrawDelay",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getMinTargetLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolInviteFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolInviteFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVRF",
      "outputs": [
        {
          "internalType": "contract IVRF",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inviteFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minTargetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolInviteFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setAcceptTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuto",
          "name": "_auto_close",
          "type": "address"
        },
        {
          "internalType": "contract IAuto",
          "name": "_auto_draw",
          "type": "address"
        }
      ],
      "name": "setAuto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "second",
          "type": "uint32"
        }
      ],
      "name": "setDrawDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IExecutor",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "num",
          "type": "uint32"
        }
      ],
      "name": "setJoinLimitNum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setMinTargetAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setProtocolFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolInviteFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setProtocolInviteFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVRF",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setVRF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x96760a2e74a8e740096d10b091b7ce2af712be5688e913297943e44b5295f032",
  "receipt": {
    "to": null,
    "from": "0x2Ef6c4Cf5744CA26Ae1915c8684d4b5d5D16c879",
    "contractAddress": "0x303E0BF6a156e3371B5D565cfd4593aD044925Ea",
    "transactionIndex": 4,
    "gasUsed": "2301105",
    "logsBloom": "0x
    "blockHash": "0x0ad9ddd8ceafaf0286decdf0412a8a1d695b4a5f0c9187f4ad63484c7bdbd13e",
    "transactionHash": "0x96760a2e74a8e740096d10b091b7ce2af712be5688e913297943e44b5295f032",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 23548477,
        "transactionHash": "0x96760a2e74a8e740096d10b091b7ce2af712be5688e913297943e44b5295f032",
        "address": "0x303E0BF6a156e3371B5D565cfd4593aD044925Ea",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002ef6c4cf5744ca26ae1915c8684d4b5d5d16c879"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x0ad9ddd8ceafaf0286decdf0412a8a1d695b4a5f0c9187f4ad63484c7bdbd13e"
      }
    ],
    "blockNumber": 23548477,
    "cumulativeGasUsed": "5435614",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x0000000000000000000000000000000000000000"
    ],
    "0x33326bd584BFbba655cA8026b070D9a3E165a0E6",
    500,
    "0x33326bd584BFbba655cA8026b070D9a3E165a0E6",
    1000,
    "0x893BAB56Cb5f4E319f402A5d0100566A363C9300",
    "0xb1BB64e9401e1EE822887357c8f20179bF677543",
    "0x8C89b1F356F966c9B5E17415fA43D0fb560b29b3",
    "0x150C1C70D945Bfff54612DD2e3F41Bb73a861cAe"
  ],
  "numDeployments": 1,
  "solcInputHash": "8f5cdadc06674ad86189e872bbe06f3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_acceptTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inviteRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inviteFee\",\"type\":\"uint256\"},{\"internalType\":\"contract IExecutor\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"contract IVRF\",\"name\":\"_vrf\",\"type\":\"address\"},{\"internalType\":\"contract IAuto\",\"name\":\"_auto_close\",\"type\":\"address\"},{\"internalType\":\"contract IAuto\",\"name\":\"_auto_draw\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTO_CLOSE\",\"outputs\":[{\"internalType\":\"contract IAuto\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTO_DRAW\",\"outputs\":[{\"internalType\":\"contract IAuto\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DRAW_DELAY_SEC\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR\",\"outputs\":[{\"internalType\":\"contract IExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_JOIN_NUM\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_PUNKS\",\"outputs\":[{\"internalType\":\"contract IProxyNFTStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRF\",\"outputs\":[{\"internalType\":\"contract IVRF\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"}],\"name\":\"checkAcceptToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkExclusive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"checkJoinTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkNFTContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"copyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskItem\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"checkNewTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"internalType\":\"struct TaskExt\",\"name\":\"ext\",\"type\":\"tuple\"}],\"name\":\"checkNewTaskExt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"copyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskItem\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"checkNewTaskRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"}],\"name\":\"checkPerJoinLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"checkTokenListing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoClose\",\"outputs\":[{\"internalType\":\"contract IAuto\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoDraw\",\"outputs\":[{\"internalType\":\"contract IAuto\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDrawDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMinTargetLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolInviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolInviteFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVRF\",\"outputs\":[{\"internalType\":\"contract IVRF\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviteFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTargetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolInviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setAcceptTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuto\",\"name\":\"_auto_close\",\"type\":\"address\"},{\"internalType\":\"contract IAuto\",\"name\":\"_auto_draw\",\"type\":\"address\"}],\"name\":\"setAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"second\",\"type\":\"uint32\"}],\"name\":\"setDrawDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IExecutor\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"}],\"name\":\"setJoinLimitNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMinTargetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setProtocolFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setProtocolInviteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setProtocolInviteFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVRF\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkAcceptToken(address)\":{\"params\":{\"acceptToken\":\"token address, blockchain token is address(0)\"},\"returns\":{\"_0\":\"bool\"}},\"checkTokenListing(address,address,uint256[],uint256[])\":{\"params\":{\"addr\":\"NFT contract address\",\"amounts\":\"tokenId amount array (ERC721 can be null)\",\"tokenIds\":\"tokenId array\"}},\"getProtocolFee()\":{\"returns\":{\"_0\":\"fee (200 = 25%, 1,000 = 10%)\"}},\"getProtocolInviteFee()\":{\"returns\":{\"_0\":\"fee (200 = 25%, 1,000 = 10%)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setProtocolFee(uint256)\":{\"params\":{\"fee\":\"fee (500 = 5%, 1,000 = 10%)\"}},\"setProtocolInviteFee(uint256)\":{\"params\":{\"fee\":\"fee (500 = 5%, 1,000 = 10%)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Helper.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAcceptToken(address)\":{\"notice\":\"check acceptToken support\"},\"checkNFTContract(address)\":{\"notice\":\"check nft contract, support erc721 & erc1155\"},\"checkNewTask(address,(address,address,uint256[],uint256[],address,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"check the new task inputs\"},\"checkTokenListing(address,address,uint256[],uint256[])\":{\"notice\":\"checking seller listing NFTs ownership and balance\"},\"getDrawDelay()\":{\"notice\":\"get Draw Delay second for security\"},\"getProtocolFee()\":{\"notice\":\"get protocol fee for eache success TaskItem payment, default is 2%\"},\"getProtocolInviteFee()\":{\"notice\":\"get protocol fee for eache success TaskItem payment, default is 2%\"},\"getVRF()\":{\"notice\":\"get IVRF instance  \"},\"setAcceptTokens(address[],bool)\":{\"notice\":\"set the acceptTokens\"},\"setDrawDelay(uint32)\":{\"notice\":\"set Draw Delay for security\"},\"setExecutor(address)\":{\"notice\":\"set operator\"},\"setJoinLimitNum(uint32)\":{\"notice\":\"set the set MAX_PER_JOIN_NUM\"},\"setOperator(address,bool)\":{\"notice\":\"set operator\"},\"setProtocolFee(uint256)\":{\"notice\":\"set protocol fee for eache success TaskItem payment, default is 5%\"},\"setProtocolFeeRecipient(address)\":{\"notice\":\"set the ProtocolFeeRecipient\"},\"setProtocolInviteFee(uint256)\":{\"notice\":\"set protocol fee for eache success TaskItem payment, default is 5%\"},\"setProtocolInviteFeeRecipient(address)\":{\"notice\":\"set the ProtocolFeeRecipient\"},\"setVRF(address)\":{\"notice\":\"set the VRF\"}},\"notice\":\"It is the contract for protocol settings\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/other/Helper.sol\":\"Helper\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/IAuto.sol\":{\"content\":\"  // SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct Task {\\n    uint256 endTime;\\n    uint256 lastTimestamp;\\n}\\n\\ninterface IAuto {\\n\\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\\n\\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);    \\n    \\n    event RevertInvoke(uint256 taskId, string reason);\\n\\n    function addTask(uint256 taskId, uint endTime) external;\\n    function addTasks(uint256[] memory taskIds, uint[] memory endTime) external;\\n    function removeTask(uint256 taskId) external;\\n    function getQueueTasks() external view returns (uint256[] memory);\\n\\n}\",\"keccak256\":\"0xb786546e5a0a59be96d512802cee7324b2def1baab3ad12c6419b5a8fa354611\",\"license\":\"MIT\"},\"contracts/interfaces/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n/** \\n    TaskStatus\\n    0) Pending: task created but not reach starttime\\n    1) Open: task opening\\n    2) Close: task close, waiting for draw\\n    3) Success: task reach target, drawed winner\\n    4) Fail: task Fail and expired\\n    5) Cancel: task user cancel\\n */\\nenum TaskStatus {\\n    Pending,\\n    Open,\\n    Close,\\n    Success,\\n    Fail,\\n    Cancel\\n}\\n\\n\\n\\nstruct TaskItem {\\n\\n    address seller; // Owner of the NFTs  \\n    address nftContract; // NFT registry address    \\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\n    uint256[] tokenAmounts; // support ERC1155\\n    \\n    address acceptToken; // acceptToken    \\n    TaskStatus status; // Task status    \\n\\n    uint256 startTime; // Task start time    \\n    uint256 endTime; // Task end time\\n    \\n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \\n    uint256 price; // Per ticket price  (in wei)    \\n    \\n    uint256 copyId;     // game copy id\\n    \\n    // editable fields\\n    uint256 amountCollected; // The amount (in wei) collected of this task\\n    uint256 depositId; // NFTs depositId (system set)\\n\\n    \\n}\\n\\nstruct TaskExt {\\n    string title; // title (for searching keywords)  \\n    string note;   // memo\\n}\\n\\nstruct TaskInvite {\\n    mapping(address=>uint256) balance;\\n    address[] balanceKeys;\\n}\\n\\nstruct Ticket {\\n    uint256 number;  // the ticket's id, equal to the end number (last ticket id)\\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\\n    address owner;  // ticket owner\\n}\\n\\nstruct TaskInfo {\\n    uint256 lastTID;\\n    uint256 closeTime;\\n    uint256 finalNo;\\n}\\n \\nstruct UserState {\\n    uint256 num; // user buyed tickets count\\n    bool claimed;  // user claimed\\n}\\ninterface IExecutor {\\n\\n    // ============= events ====================\\n\\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\\n    event CancelTask(uint256 taskId, address seller);\\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint256 number,string note);\\n    event PickWinner(uint256 taskId, address winner, uint256 number);\\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\\n    event ClaimNFT(uint256 taskId, address seller, address nftContract, uint256[] tokenIds);    \\n    event CreateTickets(uint256 taskId, address buyer, uint256 num, uint256 start, uint256 end);\\n\\n    event TransferFee(uint256 taskId, address to, address token, uint256 amount); // for protocol\\n    event TransferShareAmount(uint256 taskId, address to, address token, uint256 amount); // for winners\\n    event TransferPayment(uint256 taskId, address to, address token, uint256 amount); // for seller\\n\\n    // ============= functions ====================\\n\\n    function count() external view returns (uint256);\\n    function exists(uint256 taskId) external view returns (bool);\\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\\n    function getInfo(uint256 taskId) external view returns (TaskInfo memory);\\n    function isFail(uint256 taskId) external view returns(bool);\\n    function getUserCount(address user) external view returns (uint256);\\n    function getUserState(uint256 taskId, address user) external view returns(UserState memory);\\n\\n    function createTask(TaskItem memory item, TaskExt memory ext) external payable;\\n    function reCreateTask(uint256 taskId, TaskItem memory item, TaskExt memory ext) external payable;\\n    function joinTask(address  InvitePerson, uint256 taskId, uint32 num, string memory note) external payable;\\n    function cancelTask(uint256 taskId) external payable;\\n    function closeTask(uint256 taskId) external payable;\\n    function pickWinner(uint256 taskId) external payable;\\n\\n    function claimTokens(uint256[] memory taskIds) external;\\n    function claimNFTs(uint256[] memory taskIds) external payable;\\n\\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\\n}\\n\",\"keccak256\":\"0x3e89259be9a11cf415a46bb536c8694eaf8757954f046a1210e55cbae01b4615\",\"license\":\"MIT\"},\"contracts/interfaces/IHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// OpenZeppelin contracts\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Openluck interfaces\\nimport {TaskItem, TaskExt} from \\\"./IExecutor.sol\\\";\\nimport {IVRF} from \\\"./IVRF.sol\\\";\\nimport {IAuto} from \\\"./IAuto.sol\\\";\\n\\nimport {IProxyNFTStation} from \\\"./IProxyNFTStation.sol\\\";\\n\\ninterface IHelper {\\n\\n    function checkPerJoinLimit(uint32 num) external view returns (bool);\\n    function checkAcceptToken(address acceptToken) external view returns (bool);\\n    function checkNFTContract(address addr) external view returns (bool);\\n    function checkNewTask(address user, TaskItem memory item) external view returns (bool);\\n    function checkNewTaskExt(TaskExt memory ext) external pure returns (bool);\\n    function checkNewTaskRemote(TaskItem memory item) external view returns (bool);\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) external view returns (bool);\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool,string memory);    \\n    function checkExclusive(address account, address token, uint256 amount) external view returns (bool);\\n\\n    function getProtocolFeeRecipient() external view returns (address);\\n    function getProtocolFee() external view returns (uint256);\\n    function getProtocolInviteFeeRecipient() external view returns (address);\\n    function getProtocolInviteFee() external view returns (uint256);\\n    function getMinTargetLimit(address token) external view returns (uint256);\\n    function getDrawDelay() external view returns (uint32);\\n\\n    function getVRF() external view returns (IVRF);\\n    function getAutoClose() external view returns (IAuto);\\n    function getAutoDraw() external view returns (IAuto);\\n\\n}\\n\",\"keccak256\":\"0x6a563eb4847236291dca286c81fb6672de2a72f71ee9fb7af8bad300929d3053\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyNFTStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct DepositNFT {\\n    address user; // deposit user\\n    address nftContract; // NFT registry address    \\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\n    uint256[] amounts; // support ERC1155\\n    uint256 endTime; // Task end time\\n}\\n\\ninterface IProxyNFTStation {\\n\\n    event Deposit(address indexed executor, uint256 depositId, address indexed user, address nft, uint256[] tokenIds, uint256[] amounts, uint256 endTime);\\n    event Withdraw(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\n    event Redeem(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\n\\n    function getNFT(address executor, uint256 depositId) external view returns(DepositNFT memory);\\n    function deposit(address user, address nft, uint256[] memory tokenIds, uint256[] memory amounts, uint256 endTime) external payable returns (uint256 depositId);    \\n    function withdraw(uint256 depositId, address to) external;    \\n    function redeem(address executor, uint256 depositId, address to) external;    \\n}\",\"keccak256\":\"0x387d90d135b20576afece478079c37f55a7be0084caff72f71bc2bd4fed10f6b\",\"license\":\"MIT\"},\"contracts/interfaces/IVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVRF {\\n\\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number);    \\n\\n    /**\\n     * Requests randomness from a user-provided max\\n     */\\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\\n\\n    /**\\n     * Views random result\\n     */\\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\\n}\",\"keccak256\":\"0x0bb8872c24c9e671bfc8a764af0a3ef48eb46b945c8eddbdfe0a09ef9b783ec8\",\"license\":\"MIT\"},\"contracts/other/Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// OpenZeppelin contracts\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n//  interfaces\\nimport {IExecutor, TaskItem, TaskExt, TaskStatus} from \\\"../interfaces/IExecutor.sol\\\";\\nimport {IHelper} from \\\"../interfaces/IHelper.sol\\\";\\nimport {IVRF} from \\\"../interfaces/IVRF.sol\\\";\\nimport {IAuto} from \\\"../interfaces/IAuto.sol\\\";\\n\\nimport {IProxyNFTStation} from \\\"../interfaces/IProxyNFTStation.sol\\\";\\n\\n/** @title  Helper.\\n * @notice It is the contract for protocol settings\\n */\\ncontract Helper is IHelper, Ownable {\\n    using SafeMath for uint256;\\n    // ============  interfaces ============\\n\\n    IExecutor public EXECUTOR;\\n    IVRF public VRF;\\n\\n    IAuto public AUTO_CLOSE;  \\n    IAuto public AUTO_DRAW;  \\n    \\n    IProxyNFTStation public PROXY_PUNKS; \\n\\n    address public feeRecipient;    // protocol fee recipient\\n\\n    uint256 public protocolInviteFee;\\n    address public inviteFeeRecipient;\\n\\n    uint32 public MAX_PER_JOIN_NUM = 10000;    // limit user per jointask num (default 10000), to avoid block fail and huge gas fee\\n    uint32 public DRAW_DELAY_SEC = 120;    // picker winner need a delay time from task close. (default 120sec)\\n    uint256 public protocolFee = 500;     // acceptToken (500 = 5%, 1,000 = 10%)\\n\\n    mapping(address => bool) public operators;     // protocol income balance (address => bool)\\n    mapping(address => bool) public acceptTokens;   // accept payment tokens (Chain Token equals to zero address)     \\n    mapping(address => uint256) public minTargetAmount;  // when seller create task, check the min targetAmount limit (token address => min amount)\\n\\n    constructor(\\n        address[] memory _acceptTokens,\\n        address _recipient,\\n        uint256 _fee,\\n        address _inviteRecipient,\\n        uint256 _inviteFee,\\n        IExecutor  _executor,\\n        IVRF _vrf,\\n        IAuto _auto_close,\\n        IAuto _auto_draw        \\n    ) {\\n        feeRecipient = _recipient;\\n        protocolFee = _fee;\\n        inviteFeeRecipient = _inviteRecipient;\\n        protocolInviteFee = _inviteFee;\\n        EXECUTOR = _executor;\\n        VRF = _vrf;        \\n        AUTO_CLOSE = _auto_close;\\n        AUTO_DRAW = _auto_draw;\\n        setAcceptTokens(_acceptTokens, true);\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == owner() || operators[msg.sender], \\\"onlyOperator\\\");\\n        _;\\n    }\\n\\n    function getMinTargetLimit(address token) external view override returns (uint256) {\\n        return minTargetAmount[token];\\n    }\\n\\n    function checkPerJoinLimit(uint32 num) public view override returns (bool) {\\n        return MAX_PER_JOIN_NUM < 1 || num <= MAX_PER_JOIN_NUM;\\n    }\\n\\n    /**\\n    @notice check acceptToken support\\n    @param acceptToken token address, blockchain token is address(0)\\n    @return bool\\n    */\\n    function checkAcceptToken(address acceptToken)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return acceptTokens[acceptToken];\\n    }\\n\\n    /**\\n     * @notice check nft contract, support erc721 & erc1155\\n     */\\n    function checkNFTContract(address addr) public view override returns (bool) {\\n        require(addr != address(0) && Address.isContract(addr), \\\"nft\\\");\\n        require(            \\n            IERC165(addr).supportsInterface(0x80ac58cd) ||  // ERC721 interfaceID\\n            IERC165(addr).supportsInterface(0xd9b67a26), // ERC1155 interfaceID\\n            \\\"Invalid contract\\\"\\n        );\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice check the new task inputs\\n     */\\n    function checkNewTask(address user, TaskItem memory item) public view override returns(bool) { \\n\\n        require(item.seller != address(0) && item.seller == user, \\\"seller\\\");          \\n        require(item.tokenIds.length > 0, \\\"tokenIds\\\");\\n        require(block.timestamp < item.endTime, \\\"endTime\\\");\\n         require(item.endTime - block.timestamp > 84600 && item.endTime - block.timestamp < 2678400, \\\"duration\\\"); // at least 23.5 hour, 31 days limit\\n        require(item.price > 0 && item.price < item.targetAmount && item.targetAmount.mod(item.price) == 0,\\\"price or targetAmount\\\");\\n\\n        uint num = item.targetAmount.div(item.price);\\n        require(num > 0 && num <= 100000 && num.mod(10) == 0, \\\"num\\\");\\n\\n        require(item.amountCollected == 0, \\\"collect\\\");    \\n       \\n        // check nftContract\\n        require(checkNFTContract(item.nftContract), \\\"nft\\\");\\n        (bool checkState, string memory checkMsg) = checkTokenListing(item.nftContract, item.seller, item.tokenIds, item.tokenAmounts);\\n        require(checkState, checkMsg);\\n\\n        return true;\\n    }\\n\\n    function checkNewTaskExt(TaskExt memory ext) public pure override returns(bool) {\\n        require(bytes(ext.title).length >=0 && bytes(ext.title).length <= 256, \\\"title\\\");\\n        require(bytes(ext.note).length <= 256, \\\"note\\\");\\n        return true;\\n    }\\n\\n    function checkNewTaskRemote(TaskItem memory item) public view override returns (bool) \\n    {            \\n        require(checkAcceptToken(item.acceptToken), \\\"Unsupported acceptToken\\\");\\n        uint256 minTarget = minTargetAmount[item.acceptToken];\\n        require(minTarget == 0 || item.targetAmount >= minTarget, \\\"target\\\");\\n        return true;\\n    }\\n\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) public view override returns(bool) {\\n\\n        require(bytes(note).length <= 256, \\\"Note too large\\\");\\n        require(checkPerJoinLimit(num), \\\"Over join limit\\\");                \\n        require(num > 0, \\\"num\\\");\\n\\n        TaskItem memory item = EXECUTOR.getTask(taskId);\\n\\n        require(item.seller != user, \\\"Not allow owner\\\");\\n        require(block.timestamp >= item.startTime && block.timestamp <= item.endTime, \\\"endTime\\\");\\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \\\"status\\\");\\n\\n        // Calculate number of TOKEN to this contract\\n        uint256 amount = item.price.mul(num);\\n        require(amount > 0, \\\"amount\\\");\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice checking seller listing NFTs ownership and balance\\n     * @param addr NFT contract address\\n     * @param tokenIds tokenId array\\n     * @param amounts tokenId amount array (ERC721 can be null)\\n     */\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) public view override returns (bool, string memory)\\n    {\\n       \\n        if (IERC165(addr).supportsInterface(0x80ac58cd)) {         // ERC721 interfaceID\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\n                if (IERC721(addr).ownerOf(tokenIds[i]) != seller) {\\n                    return (false, \\\"Token listed or not owner\\\");\\n                }               \\n            }\\n        } else if (IERC165(addr).supportsInterface(0xd9b67a26)) {  // ERC1155 interfaceID\\n            require(tokenIds.length == amounts.length, \\\"Invalid ids len\\\");\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\n                if (!(IERC1155(addr).balanceOf(seller, tokenIds[i]) >= amounts[i] && amounts[i] > 0)) {\\n                    return (false, \\\"amount or balance\\\");\\n                }\\n            }\\n        }\\n        return (true ,\\\"\\\");\\n    }\\n\\n    function checkExclusive(address account, address token, uint256 amount) override public view returns (bool){\\n        if (amount > 0 && Address.isContract(token)) {\\n            if (IERC165(token).supportsInterface(0x80ac58cd)) {\\n                return IERC721(token).balanceOf(account) >= amount;\\n            }\\n            return IERC20(token).balanceOf(account) >= amount;\\n        }\\n\\n        return true;\\n    }\\n\\n    function getProtocolFeeRecipient()\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return feeRecipient;\\n    }\\n\\n    /**\\n    @notice get protocol fee for eache success TaskItem payment, default is 2%\\n    @return fee (200 = 25%, 1,000 = 10%)\\n    */\\n    function getProtocolInviteFee() external view override returns (uint256) {\\n        return protocolInviteFee;\\n    }\\n\\n    function getProtocolInviteFeeRecipient()\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return inviteFeeRecipient;\\n    }\\n\\n    /**\\n    @notice get protocol fee for eache success TaskItem payment, default is 2%\\n    @return fee (200 = 25%, 1,000 = 10%)\\n    */\\n    function getProtocolFee() external view override returns (uint256) {\\n        return protocolFee;\\n    }\\n\\n    /**\\n    @notice get Draw Delay second for security\\n     */\\n    function getDrawDelay() external view override returns (uint32) {\\n        return DRAW_DELAY_SEC;\\n    }\\n\\n    /**\\n    @notice get IVRF instance  \\n    */\\n    function getVRF() public view override returns (IVRF) {\\n        return VRF;\\n    }\\n\\n   \\n\\n    function getAutoClose() external view override returns (IAuto) {\\n        return AUTO_CLOSE;\\n    }\\n\\n    function getAutoDraw() external view override returns (IAuto) {\\n        return AUTO_DRAW;\\n    }\\n\\n\\n    //  ============ onlyOwner  functions  ============\\n\\n    /**\\n    @notice set operator\\n     */\\n    function setOperator(address addr, bool enable) external onlyOwner {\\n        operators[addr] = enable;\\n    }\\n\\n    /**\\n    @notice set the ProtocolFeeRecipient\\n     */\\n    function setProtocolFeeRecipient(address addr) external onlyOwner {\\n        feeRecipient = addr;\\n    }\\n\\n    /**\\n    @notice set protocol fee for eache success TaskItem payment, default is 5%\\n    @param fee fee (500 = 5%, 1,000 = 10%)\\n    */\\n    function setProtocolInviteFee(uint256 fee) external onlyOwner {\\n        protocolInviteFee = fee;\\n    }\\n\\n       /**\\n    @notice set the ProtocolFeeRecipient\\n     */\\n    function setProtocolInviteFeeRecipient(address addr) external onlyOwner {\\n        inviteFeeRecipient = addr;\\n    }\\n\\n    /**\\n    @notice set protocol fee for eache success TaskItem payment, default is 5%\\n    @param fee fee (500 = 5%, 1,000 = 10%)\\n    */\\n    function setProtocolFee(uint256 fee) external onlyOwner {\\n        protocolFee = fee;\\n    }\\n\\n    //  ============ onlyOwner & onlyOperator functions  ============\\n\\n    /**\\n    @notice set the set MAX_PER_JOIN_NUM\\n     */\\n    function setJoinLimitNum(uint32 num) external onlyOperator {\\n        MAX_PER_JOIN_NUM = num;\\n    }\\n\\n    /**\\n    @notice set Draw Delay for security\\n     */\\n    function setDrawDelay(uint32 second) external onlyOperator {\\n        DRAW_DELAY_SEC = second;\\n    }\\n\\n    /**\\n    @notice set the acceptTokens\\n     */\\n    function setAcceptTokens(address[] memory tokens, bool enable)\\n        public\\n        onlyOperator\\n    {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            acceptTokens[tokens[i]] = enable;\\n        }\\n    }\\n\\n\\n    function setMinTargetAmount(address[] memory tokens, uint256[] memory amounts)\\n        public\\n        onlyOperator\\n    {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            minTargetAmount[tokens[i]] = amounts[i];\\n        }\\n    }\\n\\n    /**\\n    @notice set operator\\n     */\\n    function setExecutor(IExecutor _executor) external onlyOwner {\\n        EXECUTOR = _executor;\\n    }\\n\\n    /**\\n    @notice set the VRF\\n     */\\n    function setVRF(IVRF addr) external onlyOperator {\\n        VRF = addr;\\n    }\\n\\n\\n\\n    function setAuto(IAuto _auto_close, IAuto _auto_draw) external onlyOperator {\\n        AUTO_CLOSE = _auto_close;\\n        AUTO_DRAW = _auto_draw;\\n    }\\n}\\n\",\"keccak256\":\"0xff0d0a24340d80d28aeda0bd34552767215a46179728e4d092d19cf1a06888ee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260088054600160a01b600160e01b03191664078000027160a41b1790556101f46009553480156200003457600080fd5b506040516200287b3803806200287b833981016040819052620000579162000233565b6200006233620000ea565b600680546001600160a01b03199081166001600160a01b038b8116919091179092556009899055600880548216898416179055600787905560018054821687841617815560028054831687851617905560038054831686851617905560048054909216928416929092179055620000db908a906200013a565b505050505050505050620003ef565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b0316331480620001635750336000908152600a602052604090205460ff165b620001a35760405162461bcd60e51b815260206004820152600c60248201526b37b7363ca7b832b930ba37b960a11b604482015260640160405180910390fd5b60005b8251811015620002115781600b6000858481518110620001ca57620001ca620003c3565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620002088162000399565b915050620001a6565b505050565b80516001600160a01b03811681146200022e57600080fd5b919050565b60008060008060008060008060006101208a8c0312156200025357600080fd5b89516001600160401b03808211156200026b57600080fd5b818c0191508c601f8301126200028057600080fd5b815181811115620002955762000295620003d9565b604051601f19603f8360051b011681018181108482111715620002bc57620002bc620003d9565b8060405250809250818152602081019250602084018f60208460051b8701011115620002e757600080fd5b600094505b828510156200031657620003008162000216565b84526001949094019360209384019301620002ec565b509b506200032b9250505060208b0162000216565b975060408a015196506200034260608b0162000216565b955060808a015194506200035960a08b0162000216565b93506200036960c08b0162000216565b92506200037960e08b0162000216565b91506200038a6101008b0162000216565b90509295985092959850929598565b6000600019821415620003bc57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61247c80620003ff6000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c8063873360d711610167578063cb9b4e12116100ce578063e521cb9211610087578063e521cb9214610620578063e67aa0d114610633578063e7e46def1461064a578063edd3159d1461065d578063f2fde38b1461066e578063f5a62e191461068157600080fd5b8063cb9b4e12146105a8578063d3a01b0a146105bb578063d45d76b3146105ce578063d48ed1a5146105f1578063d773745614610604578063dd8067e71461061757600080fd5b80639ef4fdd5116101205780639ef4fdd51461054b578063a126285b1461055e578063a23c6e9e14610571578063a5a4103114610584578063b0e21e8a1461058c578063b6ccbcc81461059557600080fd5b8063873360d7146104d95780638859e523146104f05780638da5cb5b146105035780638ddf73a1146105145780639861b7b1146105255780639a6ad8531461053857600080fd5b80634e30dd901161020b578063715018a6116101c4578063715018a61461044e57806372c8fc0e14610456578063770ee87014610467578063787dce3d146104875780637a6bbf181461049a5780637f994c19146104ad57600080fd5b80634e30dd90146103e7578063558a7297146103fa578063630dc7cb1461040d5780636896c5ce146104205780636c8ee8b2146104335780636feaf5cf1461044657600080fd5b80631c3c0ea81161025d5780631c3c0ea8146103415780631e07dbb81461035457806323961975146103675780633156a58d1461038c578063375a32be1461039d57806346904840146103d457600080fd5b80630b7bd2da1461029a578063136611d5146102af57806313e7c9d8146102d757806319af3253146102fa5780631a88f8fc14610320575b600080fd5b6102ad6102a8366004611f93565b610694565b005b6102c26102bd366004612067565b61070f565b60405190151581526020015b60405180910390f35b6102c26102e5366004611cef565b600a6020526000908152604090205460ff1681565b600854600160c01b900463ffffffff165b60405163ffffffff90911681526020016102ce565b61033361032e366004611d29565b6107e8565b6040516102ce92919061225f565b6102ad61034f366004611cef565b610ba9565b6102ad6103623660046121f7565b610bd3565b6003546001600160a01b03165b6040516001600160a01b0390911681526020016102ce565b6004546001600160a01b0316610374565b6103c66103ab366004611cef565b6001600160a01b03166000908152600c602052604090205490565b6040519081526020016102ce565b600654610374906001600160a01b031681565b600554610374906001600160a01b031681565b6102ad610408366004611df2565b610c3d565b600154610374906001600160a01b031681565b600354610374906001600160a01b031681565b6102c2610441366004611e2b565b610c70565b6007546103c6565b6102ad610f82565b6006546001600160a01b0316610374565b6103c6610475366004611cef565b600c6020526000908152604090205481565b6102ad6104953660046121c5565b610f96565b6102ad6104a83660046121f7565b610fa3565b6102c26104bb366004611cef565b6001600160a01b03166000908152600b602052604090205460ff1690565b60085461030b90600160a01b900463ffffffff1681565b6102c26104fe366004611cef565b61100d565b6000546001600160a01b0316610374565b6008546001600160a01b0316610374565b6102c26105333660046121f7565b6111ab565b6102ad610546366004611cef565b6111e6565b6102c2610559366004611db1565b611210565b600254610374906001600160a01b031681565b6102ad61057f3660046121c5565b611374565b6009546103c6565b6103c660095481565b6102c26105a3366004611fc1565b611381565b6102ad6105b6366004611f30565b6113ff565b600454610374906001600160a01b031681565b6102c26105dc366004611cef565b600b6020526000908152604090205460ff1681565b6102ad6105ff366004611ed7565b6114af565b600854610374906001600160a01b031681565b6103c660075481565b6102ad61062e366004611cef565b61156e565b60085461030b90600160c01b900463ffffffff1681565b6102c2610658366004611e7a565b611598565b6002546001600160a01b0316610374565b6102ad61067c366004611cef565b611853565b6102ad61068f366004611cef565b6118cc565b6000546001600160a01b03163314806106bc5750336000908152600a602052604090205460ff165b6106e15760405162461bcd60e51b81526004016106d89061228d565b60405180910390fd5b600380546001600160a01b039384166001600160a01b03199182161790915560048054929093169116179055565b60808101516001600160a01b03166000908152600b602052604081205460ff1661077b5760405162461bcd60e51b815260206004820152601760248201527f556e737570706f7274656420616363657074546f6b656e00000000000000000060448201526064016106d8565b60808201516001600160a01b03166000908152600c60205260409020548015806107aa57508083610100015110155b6107df5760405162461bcd60e51b81526020600482015260066024820152651d185c99d95d60d21b60448201526064016106d8565b50600192915050565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526000906060906001600160a01b038716906301ffc9a79060240160206040518083038186803b15801561083457600080fd5b505afa158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c9190611f76565b156109835760005b845181101561097d57856001600160a01b0316876001600160a01b0316636352211e8784815181106108a8576108a86123ea565b60200260200101516040518263ffffffff1660e01b81526004016108ce91815260200190565b60206040518083038186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190611d0c565b6001600160a01b03161461096b57505060408051808201909152601981527f546f6b656e206c6973746564206f72206e6f74206f776e657200000000000000602082015260009150610ba0565b8061097581612379565b915050610874565b50610b8b565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038716906301ffc9a79060240160206040518083038186803b1580156109c957600080fd5b505afa1580156109dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a019190611f76565b15610b8b578251845114610a495760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21034b239903632b760891b60448201526064016106d8565b60005b8451811015610b8957838181518110610a6757610a676123ea565b6020026020010151876001600160a01b031662fdd58e88888581518110610a9057610a906123ea565b60200260200101516040518363ffffffff1660e01b8152600401610ac99291906001600160a01b03929092168252602082015260400190565b60206040518083038186803b158015610ae157600080fd5b505afa158015610af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1991906121de565b10158015610b4057506000848281518110610b3657610b366123ea565b6020026020010151115b610b77575050604080518082019091526011815270616d6f756e74206f722062616c616e636560781b602082015260009150610ba0565b80610b8181612379565b915050610a4c565b505b50506040805160208101909152600081526001905b94509492505050565b610bb1611932565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331480610bfb5750336000908152600a602052604090205460ff165b610c175760405162461bcd60e51b81526004016106d89061228d565b6008805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b610c45611932565b6001600160a01b03919091166000908152600a60205260409020805460ff1916911515919091179055565b80516000906001600160a01b031615801590610ca15750826001600160a01b031682600001516001600160a01b0316145b610cd65760405162461bcd60e51b815260206004820152600660248201526539b2b63632b960d11b60448201526064016106d8565b600082604001515111610d165760405162461bcd60e51b8152602060048201526008602482015267746f6b656e49647360c01b60448201526064016106d8565b8160e001514210610d535760405162461bcd60e51b8152602060048201526007602482015266656e6454696d6560c81b60448201526064016106d8565b62014a78428360e00151610d679190612362565b118015610d8557506228de80428360e00151610d839190612362565b105b610dbc5760405162461bcd60e51b8152602060048201526008602482015267323ab930ba34b7b760c11b60448201526064016106d8565b6000826101200151118015610dda5750816101000151826101200151105b8015610df85750610120820151610100830151610df69161198c565b155b610e3c5760405162461bcd60e51b81526020600482015260156024820152741c1c9a58d9481bdc881d185c99d95d105b5bdd5b9d605a1b60448201526064016106d8565b6000610e5b83610120015184610100015161199890919063ffffffff16565b9050600081118015610e705750620186a08111155b8015610e845750610e8281600a61198c565b155b610eb65760405162461bcd60e51b81526020600482015260036024820152626e756d60e81b60448201526064016106d8565b61016083015115610ef35760405162461bcd60e51b815260206004820152600760248201526618dbdb1b1958dd60ca1b60448201526064016106d8565b610f00836020015161100d565b610f325760405162461bcd60e51b81526020600482015260036024820152621b999d60ea1b60448201526064016106d8565b600080610f5185602001518660000151876040015188606001516107e8565b91509150818190610f755760405162461bcd60e51b81526004016106d8919061227a565b5060019695505050505050565b610f8a611932565b610f9460006119a4565b565b610f9e611932565b600955565b6000546001600160a01b0316331480610fcb5750336000908152600a602052604090205460ff165b610fe75760405162461bcd60e51b81526004016106d89061228d565b6008805463ffffffff909216600160c01b0263ffffffff60c01b19909216919091179055565b60006001600160a01b0382161580159061103057506001600160a01b0382163b15155b6110625760405162461bcd60e51b81526020600482015260036024820152621b999d60ea1b60448201526064016106d8565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038316906301ffc9a79060240160206040518083038186803b1580156110a857600080fd5b505afa1580156110bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e09190611f76565b8061116457506040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038316906301ffc9a79060240160206040518083038186803b15801561112c57600080fd5b505afa158015611140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111649190611f76565b6111a35760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a590818dbdb9d1c9858dd60821b60448201526064016106d8565b506001919050565b6008546000906001600160a01b90910463ffffffff1610806111e0575060085463ffffffff600160a01b909104811690831611155b92915050565b6111ee611932565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6000808211801561122a57506001600160a01b0383163b15155b15611369576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b15801561127557600080fd5b505afa158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad9190611f76565b15611338576040516370a0823160e01b81526001600160a01b0385811660048301528391908516906370a08231906024015b60206040518083038186803b1580156112f757600080fd5b505afa15801561130b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132f91906121de565b1015905061136d565b6040516370a0823160e01b81526001600160a01b0385811660048301528391908516906370a08231906024016112df565b5060015b9392505050565b61137c611932565b600755565b600081515161010010156113bf5760405162461bcd60e51b81526020600482015260056024820152647469746c6560d81b60448201526064016106d8565b61010082602001515111156111a35760405162461bcd60e51b81526004016106d8906020808252600490820152636e6f746560e01b604082015260600190565b6000546001600160a01b03163314806114275750336000908152600a602052604090205460ff165b6114435760405162461bcd60e51b81526004016106d89061228d565b60005b82518110156114aa5781600b6000858481518110611466576114666123ea565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806114a281612379565b915050611446565b505050565b6000546001600160a01b03163314806114d75750336000908152600a602052604090205460ff165b6114f35760405162461bcd60e51b81526004016106d89061228d565b60005b82518110156114aa57818181518110611511576115116123ea565b6020026020010151600c600085848151811061152f5761152f6123ea565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061156690612379565b9150506114f6565b611576611932565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000610100825111156115de5760405162461bcd60e51b815260206004820152600e60248201526d4e6f746520746f6f206c6172676560901b60448201526064016106d8565b6115e7836111ab565b6116255760405162461bcd60e51b815260206004820152600f60248201526e13dd995c881a9bda5b881b1a5b5a5d608a1b60448201526064016106d8565b60008363ffffffff16116116615760405162461bcd60e51b81526020600482015260036024820152626e756d60e81b60448201526064016106d8565b600154604051630eb2f3bf60e11b8152600481018690526000916001600160a01b031690631d65e77e9060240160006040518083038186803b1580156116a657600080fd5b505afa1580156116ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116e291908101906120a3565b9050856001600160a01b031681600001516001600160a01b0316141561173c5760405162461bcd60e51b815260206004820152600f60248201526e2737ba1030b63637bb9037bbb732b960891b60448201526064016106d8565b8060c00151421015801561175457508060e001514211155b61178a5760405162461bcd60e51b8152602060048201526007602482015266656e6454696d6560c81b60448201526064016106d8565b60008160a0015160058111156117a2576117a26123d4565b14806117c3575060018160a0015160058111156117c1576117c16123d4565b145b6117f85760405162461bcd60e51b815260206004820152600660248201526573746174757360d01b60448201526064016106d8565b60006118188563ffffffff168361012001516119f490919063ffffffff16565b905060008111610f755760405162461bcd60e51b8152602060048201526006602482015265185b5bdd5b9d60d21b60448201526064016106d8565b61185b611932565b6001600160a01b0381166118c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d8565b6118c9816119a4565b50565b6000546001600160a01b03163314806118f45750336000908152600a602052604090205460ff165b6119105760405162461bcd60e51b81526004016106d89061228d565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610f945760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106d8565b600061136d8284612394565b600061136d828461232f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061136d8284612343565b8035611a0b81612416565b919050565b8051611a0b81612416565b600082601f830112611a2c57600080fd5b81356020611a41611a3c8361230c565b6122dc565b80838252828201915082860187848660051b8901011115611a6157600080fd5b60005b85811015611a89578135611a7781612416565b84529284019290840190600101611a64565b5090979650505050505050565b600082601f830112611aa757600080fd5b81356020611ab7611a3c8361230c565b80838252828201915082860187848660051b8901011115611ad757600080fd5b60005b85811015611a8957813584529284019290840190600101611ada565b600082601f830112611b0757600080fd5b81516020611b17611a3c8361230c565b80838252828201915082860187848660051b8901011115611b3757600080fd5b60005b85811015611a8957815184529284019290840190600101611b3a565b8035611a0b81612439565b8051611a0b81612439565b600082601f830112611b7d57600080fd5b81356001600160401b03811115611b9657611b96612400565b611ba9601f8201601f19166020016122dc565b818152846020838601011115611bbe57600080fd5b816020850160208301376000918101602001919091529392505050565b60006101a08284031215611bee57600080fd5b611bf66122b3565b9050611c0182611a00565b8152611c0f60208301611a00565b602082015260408201356001600160401b0380821115611c2e57600080fd5b611c3a85838601611a96565b60408401526060840135915080821115611c5357600080fd5b50611c6084828501611a96565b606083015250611c7260808301611a00565b6080820152611c8360a08301611b56565b60a082015260c0828101359082015260e0808301359082015261010080830135908201526101208083013590820152610140808301359082015261016080830135908201526101809182013591810191909152919050565b803563ffffffff81168114611a0b57600080fd5b600060208284031215611d0157600080fd5b813561136d81612416565b600060208284031215611d1e57600080fd5b815161136d81612416565b60008060008060808587031215611d3f57600080fd5b8435611d4a81612416565b93506020850135611d5a81612416565b925060408501356001600160401b0380821115611d7657600080fd5b611d8288838901611a96565b93506060870135915080821115611d9857600080fd5b50611da587828801611a96565b91505092959194509250565b600080600060608486031215611dc657600080fd5b8335611dd181612416565b92506020840135611de181612416565b929592945050506040919091013590565b60008060408385031215611e0557600080fd5b8235611e1081612416565b91506020830135611e208161242b565b809150509250929050565b60008060408385031215611e3e57600080fd5b8235611e4981612416565b915060208301356001600160401b03811115611e6457600080fd5b611e7085828601611bdb565b9150509250929050565b60008060008060808587031215611e9057600080fd5b8435611e9b81612416565b935060208501359250611eb060408601611cdb565b915060608501356001600160401b03811115611ecb57600080fd5b611da587828801611b6c565b60008060408385031215611eea57600080fd5b82356001600160401b0380821115611f0157600080fd5b611f0d86838701611a1b565b93506020850135915080821115611f2357600080fd5b50611e7085828601611a96565b60008060408385031215611f4357600080fd5b82356001600160401b03811115611f5957600080fd5b611f6585828601611a1b565b9250506020830135611e208161242b565b600060208284031215611f8857600080fd5b815161136d8161242b565b60008060408385031215611fa657600080fd5b8235611fb181612416565b91506020830135611e2081612416565b600060208284031215611fd357600080fd5b81356001600160401b0380821115611fea57600080fd5b9083019060408286031215611ffe57600080fd5b60405160408101818110838211171561201957612019612400565b60405282358281111561202b57600080fd5b61203787828601611b6c565b82525060208301358281111561204c57600080fd5b61205887828601611b6c565b60208301525095945050505050565b60006020828403121561207957600080fd5b81356001600160401b0381111561208f57600080fd5b61209b84828501611bdb565b949350505050565b6000602082840312156120b557600080fd5b81516001600160401b03808211156120cc57600080fd5b908301906101a082860312156120e157600080fd5b6120e96122b3565b6120f283611a10565b815261210060208401611a10565b602082015260408301518281111561211757600080fd5b61212387828601611af6565b60408301525060608301518281111561213b57600080fd5b61214787828601611af6565b60608301525061215960808401611a10565b608082015261216a60a08401611b61565b60a082015260c0838101519082015260e0808401519082015261010080840151908201526101208084015190820152610140808401519082015261016080840151908201526101809283015192810192909252509392505050565b6000602082840312156121d757600080fd5b5035919050565b6000602082840312156121f057600080fd5b5051919050565b60006020828403121561220957600080fd5b61136d82611cdb565b6000815180845260005b818110156122385760208185018101518683018201520161221c565b8181111561224a576000602083870101525b50601f01601f19169290920160200192915050565b821515815260406020820152600061209b6040830184612212565b60208152600061136d6020830184612212565b6020808252600c908201526b37b7363ca7b832b930ba37b960a11b604082015260600190565b6040516101a081016001600160401b03811182821017156122d6576122d6612400565b60405290565b604051601f8201601f191681016001600160401b038111828210171561230457612304612400565b604052919050565b60006001600160401b0382111561232557612325612400565b5060051b60200190565b60008261233e5761233e6123be565b500490565b600081600019048311821515161561235d5761235d6123a8565b500290565b600082821015612374576123746123a8565b500390565b600060001982141561238d5761238d6123a8565b5060010190565b6000826123a3576123a36123be565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146118c957600080fd5b80151581146118c957600080fd5b600681106118c957600080fdfea2646970667358221220e8f641aeabf2c5ab41f8a1b7af50835936c9e191e067eb1943b0a7d0fd7fb89064736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c8063873360d711610167578063cb9b4e12116100ce578063e521cb9211610087578063e521cb9214610620578063e67aa0d114610633578063e7e46def1461064a578063edd3159d1461065d578063f2fde38b1461066e578063f5a62e191461068157600080fd5b8063cb9b4e12146105a8578063d3a01b0a146105bb578063d45d76b3146105ce578063d48ed1a5146105f1578063d773745614610604578063dd8067e71461061757600080fd5b80639ef4fdd5116101205780639ef4fdd51461054b578063a126285b1461055e578063a23c6e9e14610571578063a5a4103114610584578063b0e21e8a1461058c578063b6ccbcc81461059557600080fd5b8063873360d7146104d95780638859e523146104f05780638da5cb5b146105035780638ddf73a1146105145780639861b7b1146105255780639a6ad8531461053857600080fd5b80634e30dd901161020b578063715018a6116101c4578063715018a61461044e57806372c8fc0e14610456578063770ee87014610467578063787dce3d146104875780637a6bbf181461049a5780637f994c19146104ad57600080fd5b80634e30dd90146103e7578063558a7297146103fa578063630dc7cb1461040d5780636896c5ce146104205780636c8ee8b2146104335780636feaf5cf1461044657600080fd5b80631c3c0ea81161025d5780631c3c0ea8146103415780631e07dbb81461035457806323961975146103675780633156a58d1461038c578063375a32be1461039d57806346904840146103d457600080fd5b80630b7bd2da1461029a578063136611d5146102af57806313e7c9d8146102d757806319af3253146102fa5780631a88f8fc14610320575b600080fd5b6102ad6102a8366004611f93565b610694565b005b6102c26102bd366004612067565b61070f565b60405190151581526020015b60405180910390f35b6102c26102e5366004611cef565b600a6020526000908152604090205460ff1681565b600854600160c01b900463ffffffff165b60405163ffffffff90911681526020016102ce565b61033361032e366004611d29565b6107e8565b6040516102ce92919061225f565b6102ad61034f366004611cef565b610ba9565b6102ad6103623660046121f7565b610bd3565b6003546001600160a01b03165b6040516001600160a01b0390911681526020016102ce565b6004546001600160a01b0316610374565b6103c66103ab366004611cef565b6001600160a01b03166000908152600c602052604090205490565b6040519081526020016102ce565b600654610374906001600160a01b031681565b600554610374906001600160a01b031681565b6102ad610408366004611df2565b610c3d565b600154610374906001600160a01b031681565b600354610374906001600160a01b031681565b6102c2610441366004611e2b565b610c70565b6007546103c6565b6102ad610f82565b6006546001600160a01b0316610374565b6103c6610475366004611cef565b600c6020526000908152604090205481565b6102ad6104953660046121c5565b610f96565b6102ad6104a83660046121f7565b610fa3565b6102c26104bb366004611cef565b6001600160a01b03166000908152600b602052604090205460ff1690565b60085461030b90600160a01b900463ffffffff1681565b6102c26104fe366004611cef565b61100d565b6000546001600160a01b0316610374565b6008546001600160a01b0316610374565b6102c26105333660046121f7565b6111ab565b6102ad610546366004611cef565b6111e6565b6102c2610559366004611db1565b611210565b600254610374906001600160a01b031681565b6102ad61057f3660046121c5565b611374565b6009546103c6565b6103c660095481565b6102c26105a3366004611fc1565b611381565b6102ad6105b6366004611f30565b6113ff565b600454610374906001600160a01b031681565b6102c26105dc366004611cef565b600b6020526000908152604090205460ff1681565b6102ad6105ff366004611ed7565b6114af565b600854610374906001600160a01b031681565b6103c660075481565b6102ad61062e366004611cef565b61156e565b60085461030b90600160c01b900463ffffffff1681565b6102c2610658366004611e7a565b611598565b6002546001600160a01b0316610374565b6102ad61067c366004611cef565b611853565b6102ad61068f366004611cef565b6118cc565b6000546001600160a01b03163314806106bc5750336000908152600a602052604090205460ff165b6106e15760405162461bcd60e51b81526004016106d89061228d565b60405180910390fd5b600380546001600160a01b039384166001600160a01b03199182161790915560048054929093169116179055565b60808101516001600160a01b03166000908152600b602052604081205460ff1661077b5760405162461bcd60e51b815260206004820152601760248201527f556e737570706f7274656420616363657074546f6b656e00000000000000000060448201526064016106d8565b60808201516001600160a01b03166000908152600c60205260409020548015806107aa57508083610100015110155b6107df5760405162461bcd60e51b81526020600482015260066024820152651d185c99d95d60d21b60448201526064016106d8565b50600192915050565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526000906060906001600160a01b038716906301ffc9a79060240160206040518083038186803b15801561083457600080fd5b505afa158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c9190611f76565b156109835760005b845181101561097d57856001600160a01b0316876001600160a01b0316636352211e8784815181106108a8576108a86123ea565b60200260200101516040518263ffffffff1660e01b81526004016108ce91815260200190565b60206040518083038186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190611d0c565b6001600160a01b03161461096b57505060408051808201909152601981527f546f6b656e206c6973746564206f72206e6f74206f776e657200000000000000602082015260009150610ba0565b8061097581612379565b915050610874565b50610b8b565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038716906301ffc9a79060240160206040518083038186803b1580156109c957600080fd5b505afa1580156109dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a019190611f76565b15610b8b578251845114610a495760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21034b239903632b760891b60448201526064016106d8565b60005b8451811015610b8957838181518110610a6757610a676123ea565b6020026020010151876001600160a01b031662fdd58e88888581518110610a9057610a906123ea565b60200260200101516040518363ffffffff1660e01b8152600401610ac99291906001600160a01b03929092168252602082015260400190565b60206040518083038186803b158015610ae157600080fd5b505afa158015610af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1991906121de565b10158015610b4057506000848281518110610b3657610b366123ea565b6020026020010151115b610b77575050604080518082019091526011815270616d6f756e74206f722062616c616e636560781b602082015260009150610ba0565b80610b8181612379565b915050610a4c565b505b50506040805160208101909152600081526001905b94509492505050565b610bb1611932565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331480610bfb5750336000908152600a602052604090205460ff165b610c175760405162461bcd60e51b81526004016106d89061228d565b6008805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b610c45611932565b6001600160a01b03919091166000908152600a60205260409020805460ff1916911515919091179055565b80516000906001600160a01b031615801590610ca15750826001600160a01b031682600001516001600160a01b0316145b610cd65760405162461bcd60e51b815260206004820152600660248201526539b2b63632b960d11b60448201526064016106d8565b600082604001515111610d165760405162461bcd60e51b8152602060048201526008602482015267746f6b656e49647360c01b60448201526064016106d8565b8160e001514210610d535760405162461bcd60e51b8152602060048201526007602482015266656e6454696d6560c81b60448201526064016106d8565b62014a78428360e00151610d679190612362565b118015610d8557506228de80428360e00151610d839190612362565b105b610dbc5760405162461bcd60e51b8152602060048201526008602482015267323ab930ba34b7b760c11b60448201526064016106d8565b6000826101200151118015610dda5750816101000151826101200151105b8015610df85750610120820151610100830151610df69161198c565b155b610e3c5760405162461bcd60e51b81526020600482015260156024820152741c1c9a58d9481bdc881d185c99d95d105b5bdd5b9d605a1b60448201526064016106d8565b6000610e5b83610120015184610100015161199890919063ffffffff16565b9050600081118015610e705750620186a08111155b8015610e845750610e8281600a61198c565b155b610eb65760405162461bcd60e51b81526020600482015260036024820152626e756d60e81b60448201526064016106d8565b61016083015115610ef35760405162461bcd60e51b815260206004820152600760248201526618dbdb1b1958dd60ca1b60448201526064016106d8565b610f00836020015161100d565b610f325760405162461bcd60e51b81526020600482015260036024820152621b999d60ea1b60448201526064016106d8565b600080610f5185602001518660000151876040015188606001516107e8565b91509150818190610f755760405162461bcd60e51b81526004016106d8919061227a565b5060019695505050505050565b610f8a611932565b610f9460006119a4565b565b610f9e611932565b600955565b6000546001600160a01b0316331480610fcb5750336000908152600a602052604090205460ff165b610fe75760405162461bcd60e51b81526004016106d89061228d565b6008805463ffffffff909216600160c01b0263ffffffff60c01b19909216919091179055565b60006001600160a01b0382161580159061103057506001600160a01b0382163b15155b6110625760405162461bcd60e51b81526020600482015260036024820152621b999d60ea1b60448201526064016106d8565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038316906301ffc9a79060240160206040518083038186803b1580156110a857600080fd5b505afa1580156110bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e09190611f76565b8061116457506040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038316906301ffc9a79060240160206040518083038186803b15801561112c57600080fd5b505afa158015611140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111649190611f76565b6111a35760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a590818dbdb9d1c9858dd60821b60448201526064016106d8565b506001919050565b6008546000906001600160a01b90910463ffffffff1610806111e0575060085463ffffffff600160a01b909104811690831611155b92915050565b6111ee611932565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6000808211801561122a57506001600160a01b0383163b15155b15611369576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b15801561127557600080fd5b505afa158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad9190611f76565b15611338576040516370a0823160e01b81526001600160a01b0385811660048301528391908516906370a08231906024015b60206040518083038186803b1580156112f757600080fd5b505afa15801561130b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132f91906121de565b1015905061136d565b6040516370a0823160e01b81526001600160a01b0385811660048301528391908516906370a08231906024016112df565b5060015b9392505050565b61137c611932565b600755565b600081515161010010156113bf5760405162461bcd60e51b81526020600482015260056024820152647469746c6560d81b60448201526064016106d8565b61010082602001515111156111a35760405162461bcd60e51b81526004016106d8906020808252600490820152636e6f746560e01b604082015260600190565b6000546001600160a01b03163314806114275750336000908152600a602052604090205460ff165b6114435760405162461bcd60e51b81526004016106d89061228d565b60005b82518110156114aa5781600b6000858481518110611466576114666123ea565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806114a281612379565b915050611446565b505050565b6000546001600160a01b03163314806114d75750336000908152600a602052604090205460ff165b6114f35760405162461bcd60e51b81526004016106d89061228d565b60005b82518110156114aa57818181518110611511576115116123ea565b6020026020010151600c600085848151811061152f5761152f6123ea565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061156690612379565b9150506114f6565b611576611932565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000610100825111156115de5760405162461bcd60e51b815260206004820152600e60248201526d4e6f746520746f6f206c6172676560901b60448201526064016106d8565b6115e7836111ab565b6116255760405162461bcd60e51b815260206004820152600f60248201526e13dd995c881a9bda5b881b1a5b5a5d608a1b60448201526064016106d8565b60008363ffffffff16116116615760405162461bcd60e51b81526020600482015260036024820152626e756d60e81b60448201526064016106d8565b600154604051630eb2f3bf60e11b8152600481018690526000916001600160a01b031690631d65e77e9060240160006040518083038186803b1580156116a657600080fd5b505afa1580156116ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116e291908101906120a3565b9050856001600160a01b031681600001516001600160a01b0316141561173c5760405162461bcd60e51b815260206004820152600f60248201526e2737ba1030b63637bb9037bbb732b960891b60448201526064016106d8565b8060c00151421015801561175457508060e001514211155b61178a5760405162461bcd60e51b8152602060048201526007602482015266656e6454696d6560c81b60448201526064016106d8565b60008160a0015160058111156117a2576117a26123d4565b14806117c3575060018160a0015160058111156117c1576117c16123d4565b145b6117f85760405162461bcd60e51b815260206004820152600660248201526573746174757360d01b60448201526064016106d8565b60006118188563ffffffff168361012001516119f490919063ffffffff16565b905060008111610f755760405162461bcd60e51b8152602060048201526006602482015265185b5bdd5b9d60d21b60448201526064016106d8565b61185b611932565b6001600160a01b0381166118c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d8565b6118c9816119a4565b50565b6000546001600160a01b03163314806118f45750336000908152600a602052604090205460ff165b6119105760405162461bcd60e51b81526004016106d89061228d565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610f945760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106d8565b600061136d8284612394565b600061136d828461232f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061136d8284612343565b8035611a0b81612416565b919050565b8051611a0b81612416565b600082601f830112611a2c57600080fd5b81356020611a41611a3c8361230c565b6122dc565b80838252828201915082860187848660051b8901011115611a6157600080fd5b60005b85811015611a89578135611a7781612416565b84529284019290840190600101611a64565b5090979650505050505050565b600082601f830112611aa757600080fd5b81356020611ab7611a3c8361230c565b80838252828201915082860187848660051b8901011115611ad757600080fd5b60005b85811015611a8957813584529284019290840190600101611ada565b600082601f830112611b0757600080fd5b81516020611b17611a3c8361230c565b80838252828201915082860187848660051b8901011115611b3757600080fd5b60005b85811015611a8957815184529284019290840190600101611b3a565b8035611a0b81612439565b8051611a0b81612439565b600082601f830112611b7d57600080fd5b81356001600160401b03811115611b9657611b96612400565b611ba9601f8201601f19166020016122dc565b818152846020838601011115611bbe57600080fd5b816020850160208301376000918101602001919091529392505050565b60006101a08284031215611bee57600080fd5b611bf66122b3565b9050611c0182611a00565b8152611c0f60208301611a00565b602082015260408201356001600160401b0380821115611c2e57600080fd5b611c3a85838601611a96565b60408401526060840135915080821115611c5357600080fd5b50611c6084828501611a96565b606083015250611c7260808301611a00565b6080820152611c8360a08301611b56565b60a082015260c0828101359082015260e0808301359082015261010080830135908201526101208083013590820152610140808301359082015261016080830135908201526101809182013591810191909152919050565b803563ffffffff81168114611a0b57600080fd5b600060208284031215611d0157600080fd5b813561136d81612416565b600060208284031215611d1e57600080fd5b815161136d81612416565b60008060008060808587031215611d3f57600080fd5b8435611d4a81612416565b93506020850135611d5a81612416565b925060408501356001600160401b0380821115611d7657600080fd5b611d8288838901611a96565b93506060870135915080821115611d9857600080fd5b50611da587828801611a96565b91505092959194509250565b600080600060608486031215611dc657600080fd5b8335611dd181612416565b92506020840135611de181612416565b929592945050506040919091013590565b60008060408385031215611e0557600080fd5b8235611e1081612416565b91506020830135611e208161242b565b809150509250929050565b60008060408385031215611e3e57600080fd5b8235611e4981612416565b915060208301356001600160401b03811115611e6457600080fd5b611e7085828601611bdb565b9150509250929050565b60008060008060808587031215611e9057600080fd5b8435611e9b81612416565b935060208501359250611eb060408601611cdb565b915060608501356001600160401b03811115611ecb57600080fd5b611da587828801611b6c565b60008060408385031215611eea57600080fd5b82356001600160401b0380821115611f0157600080fd5b611f0d86838701611a1b565b93506020850135915080821115611f2357600080fd5b50611e7085828601611a96565b60008060408385031215611f4357600080fd5b82356001600160401b03811115611f5957600080fd5b611f6585828601611a1b565b9250506020830135611e208161242b565b600060208284031215611f8857600080fd5b815161136d8161242b565b60008060408385031215611fa657600080fd5b8235611fb181612416565b91506020830135611e2081612416565b600060208284031215611fd357600080fd5b81356001600160401b0380821115611fea57600080fd5b9083019060408286031215611ffe57600080fd5b60405160408101818110838211171561201957612019612400565b60405282358281111561202b57600080fd5b61203787828601611b6c565b82525060208301358281111561204c57600080fd5b61205887828601611b6c565b60208301525095945050505050565b60006020828403121561207957600080fd5b81356001600160401b0381111561208f57600080fd5b61209b84828501611bdb565b949350505050565b6000602082840312156120b557600080fd5b81516001600160401b03808211156120cc57600080fd5b908301906101a082860312156120e157600080fd5b6120e96122b3565b6120f283611a10565b815261210060208401611a10565b602082015260408301518281111561211757600080fd5b61212387828601611af6565b60408301525060608301518281111561213b57600080fd5b61214787828601611af6565b60608301525061215960808401611a10565b608082015261216a60a08401611b61565b60a082015260c0838101519082015260e0808401519082015261010080840151908201526101208084015190820152610140808401519082015261016080840151908201526101809283015192810192909252509392505050565b6000602082840312156121d757600080fd5b5035919050565b6000602082840312156121f057600080fd5b5051919050565b60006020828403121561220957600080fd5b61136d82611cdb565b6000815180845260005b818110156122385760208185018101518683018201520161221c565b8181111561224a576000602083870101525b50601f01601f19169290920160200192915050565b821515815260406020820152600061209b6040830184612212565b60208152600061136d6020830184612212565b6020808252600c908201526b37b7363ca7b832b930ba37b960a11b604082015260600190565b6040516101a081016001600160401b03811182821017156122d6576122d6612400565b60405290565b604051601f8201601f191681016001600160401b038111828210171561230457612304612400565b604052919050565b60006001600160401b0382111561232557612325612400565b5060051b60200190565b60008261233e5761233e6123be565b500490565b600081600019048311821515161561235d5761235d6123a8565b500290565b600082821015612374576123746123a8565b500390565b600060001982141561238d5761238d6123a8565b5060010190565b6000826123a3576123a36123be565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146118c957600080fd5b80151581146118c957600080fd5b600681106118c957600080fdfea2646970667358221220e8f641aeabf2c5ab41f8a1b7af50835936c9e191e067eb1943b0a7d0fd7fb89064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkAcceptToken(address)": {
        "params": {
          "acceptToken": "token address, blockchain token is address(0)"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "checkTokenListing(address,address,uint256[],uint256[])": {
        "params": {
          "addr": "NFT contract address",
          "amounts": "tokenId amount array (ERC721 can be null)",
          "tokenIds": "tokenId array"
        }
      },
      "getProtocolFee()": {
        "returns": {
          "_0": "fee (200 = 25%, 1,000 = 10%)"
        }
      },
      "getProtocolInviteFee()": {
        "returns": {
          "_0": "fee (200 = 25%, 1,000 = 10%)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setProtocolFee(uint256)": {
        "params": {
          "fee": "fee (500 = 5%, 1,000 = 10%)"
        }
      },
      "setProtocolInviteFee(uint256)": {
        "params": {
          "fee": "fee (500 = 5%, 1,000 = 10%)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Helper.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkAcceptToken(address)": {
        "notice": "check acceptToken support"
      },
      "checkNFTContract(address)": {
        "notice": "check nft contract, support erc721 & erc1155"
      },
      "checkNewTask(address,(address,address,uint256[],uint256[],address,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "check the new task inputs"
      },
      "checkTokenListing(address,address,uint256[],uint256[])": {
        "notice": "checking seller listing NFTs ownership and balance"
      },
      "getDrawDelay()": {
        "notice": "get Draw Delay second for security"
      },
      "getProtocolFee()": {
        "notice": "get protocol fee for eache success TaskItem payment, default is 2%"
      },
      "getProtocolInviteFee()": {
        "notice": "get protocol fee for eache success TaskItem payment, default is 2%"
      },
      "getVRF()": {
        "notice": "get IVRF instance  "
      },
      "setAcceptTokens(address[],bool)": {
        "notice": "set the acceptTokens"
      },
      "setDrawDelay(uint32)": {
        "notice": "set Draw Delay for security"
      },
      "setExecutor(address)": {
        "notice": "set operator"
      },
      "setJoinLimitNum(uint32)": {
        "notice": "set the set MAX_PER_JOIN_NUM"
      },
      "setOperator(address,bool)": {
        "notice": "set operator"
      },
      "setProtocolFee(uint256)": {
        "notice": "set protocol fee for eache success TaskItem payment, default is 5%"
      },
      "setProtocolFeeRecipient(address)": {
        "notice": "set the ProtocolFeeRecipient"
      },
      "setProtocolInviteFee(uint256)": {
        "notice": "set protocol fee for eache success TaskItem payment, default is 5%"
      },
      "setProtocolInviteFeeRecipient(address)": {
        "notice": "set the ProtocolFeeRecipient"
      },
      "setVRF(address)": {
        "notice": "set the VRF"
      }
    },
    "notice": "It is the contract for protocol settings",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 941,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12446,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "EXECUTOR",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IExecutor)8101"
      },
      {
        "astId": 12449,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "VRF",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVRF)8515"
      },
      {
        "astId": 12452,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "AUTO_CLOSE",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IAuto)7802"
      },
      {
        "astId": 12455,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "AUTO_DRAW",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IAuto)7802"
      },
      {
        "astId": 12458,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "PROXY_PUNKS",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IProxyNFTStation)8361"
      },
      {
        "astId": 12460,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 12462,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "protocolInviteFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12464,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "inviteFeeRecipient",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 12467,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "MAX_PER_JOIN_NUM",
        "offset": 20,
        "slot": "8",
        "type": "t_uint32"
      },
      {
        "astId": 12470,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "DRAW_DELAY_SEC",
        "offset": 24,
        "slot": "8",
        "type": "t_uint32"
      },
      {
        "astId": 12473,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "protocolFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 12477,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "operators",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12481,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "acceptTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12485,
        "contract": "contracts/other/Helper.sol:Helper",
        "label": "minTargetAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAuto)7802": {
        "encoding": "inplace",
        "label": "contract IAuto",
        "numberOfBytes": "20"
      },
      "t_contract(IExecutor)8101": {
        "encoding": "inplace",
        "label": "contract IExecutor",
        "numberOfBytes": "20"
      },
      "t_contract(IProxyNFTStation)8361": {
        "encoding": "inplace",
        "label": "contract IProxyNFTStation",
        "numberOfBytes": "20"
      },
      "t_contract(IVRF)8515": {
        "encoding": "inplace",
        "label": "contract IVRF",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}